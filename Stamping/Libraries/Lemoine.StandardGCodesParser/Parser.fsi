// Signature file for parser generated by fsyacc
module Parser
type token = 
  | FUNC of (string)
  | OP of (string)
  | LBRACKET
  | RBRACKET
  | EOF of (int)
  | NEWLINE of (int)
  | PERCENT
  | ESCAPE
  | MINUS
  | PLUS
  | VARPREFIX
  | EQSYMB
  | STARTCOMMENT
  | ENDCOMMENT
  | FILE of (string)
  | COMMENT of (string)
  | EXTRA of (string)
  | XCODE of (char)
  | NUMBER of (float)
type tokenId = 
    | TOKEN_FUNC
    | TOKEN_OP
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_EOF
    | TOKEN_NEWLINE
    | TOKEN_PERCENT
    | TOKEN_ESCAPE
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_VARPREFIX
    | TOKEN_EQSYMB
    | TOKEN_STARTCOMMENT
    | TOKEN_ENDCOMMENT
    | TOKEN_FILE
    | TOKEN_COMMENT
    | TOKEN_EXTRA
    | TOKEN_XCODE
    | TOKEN_NUMBER
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_header
    | NONTERM_footer
    | NONTERM_optfooterpercent
    | NONTERM_optblocks
    | NONTERM_blocks
    | NONTERM_blockwithend
    | NONTERM_block
    | NONTERM_instructions
    | NONTERM_instruction
    | NONTERM_escape
    | NONTERM_code
    | NONTERM_optcomments
    | NONTERM_comments
    | NONTERM_comment
    | NONTERM_extra
    | NONTERM_file
    | NONTERM_setvariable
    | NONTERM_value
    | NONTERM_op
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (unit) 
