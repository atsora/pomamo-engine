// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "..\Lemoine.StandardGCodesParser\Parser.fsy"

// fsharplint:disable TypeNames
// fsharplint:disable UnionCasesNames
// fsharplint:disable ParameterNames PublicValuesNames

open System
open Lemoine.StandardGCodesParser
open Lemoine.StandardGCodesParser.NcProgram

let mutable eventManager: ParseEventManager option = None

# 18 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | DPRINT of (string)
  | PCLOS
  | POPEN
  | FUNC of (string)
  | OP of (string)
  | LBRACKET
  | RBRACKET
  | EOF of (int)
  | NEWLINE of (int)
  | PERCENT
  | ESCAPE
  | MINUS
  | PLUS
  | VARPREFIX
  | EQSYMB
  | STARTCOMMENT
  | ENDCOMMENT
  | FILE of (string)
  | COMMENT of (string)
  | EXTRA of (string)
  | XCODE of (char)
  | NUMBER of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_DPRINT
    | TOKEN_PCLOS
    | TOKEN_POPEN
    | TOKEN_FUNC
    | TOKEN_OP
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_EOF
    | TOKEN_NEWLINE
    | TOKEN_PERCENT
    | TOKEN_ESCAPE
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_VARPREFIX
    | TOKEN_EQSYMB
    | TOKEN_STARTCOMMENT
    | TOKEN_ENDCOMMENT
    | TOKEN_FILE
    | TOKEN_COMMENT
    | TOKEN_EXTRA
    | TOKEN_XCODE
    | TOKEN_NUMBER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_header
    | NONTERM_footer
    | NONTERM_optfooterpercent
    | NONTERM_optblocks
    | NONTERM_blocks
    | NONTERM_blockwithend
    | NONTERM_block
    | NONTERM_newlines
    | NONTERM_instructions
    | NONTERM_instruction
    | NONTERM_escape
    | NONTERM_code
    | NONTERM_optcomments
    | NONTERM_comments
    | NONTERM_comment
    | NONTERM_extra
    | NONTERM_file
    | NONTERM_setvariable
    | NONTERM_value
    | NONTERM_op
    | NONTERM_dprintcommand
    | NONTERM_dprintblock

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | DPRINT _ -> 0 
  | PCLOS  -> 1 
  | POPEN  -> 2 
  | FUNC _ -> 3 
  | OP _ -> 4 
  | LBRACKET  -> 5 
  | RBRACKET  -> 6 
  | EOF _ -> 7 
  | NEWLINE _ -> 8 
  | PERCENT  -> 9 
  | ESCAPE  -> 10 
  | MINUS  -> 11 
  | PLUS  -> 12 
  | VARPREFIX  -> 13 
  | EQSYMB  -> 14 
  | STARTCOMMENT  -> 15 
  | ENDCOMMENT  -> 16 
  | FILE _ -> 17 
  | COMMENT _ -> 18 
  | EXTRA _ -> 19 
  | XCODE _ -> 20 
  | NUMBER _ -> 21 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_DPRINT 
  | 1 -> TOKEN_PCLOS 
  | 2 -> TOKEN_POPEN 
  | 3 -> TOKEN_FUNC 
  | 4 -> TOKEN_OP 
  | 5 -> TOKEN_LBRACKET 
  | 6 -> TOKEN_RBRACKET 
  | 7 -> TOKEN_EOF 
  | 8 -> TOKEN_NEWLINE 
  | 9 -> TOKEN_PERCENT 
  | 10 -> TOKEN_ESCAPE 
  | 11 -> TOKEN_MINUS 
  | 12 -> TOKEN_PLUS 
  | 13 -> TOKEN_VARPREFIX 
  | 14 -> TOKEN_EQSYMB 
  | 15 -> TOKEN_STARTCOMMENT 
  | 16 -> TOKEN_ENDCOMMENT 
  | 17 -> TOKEN_FILE 
  | 18 -> TOKEN_COMMENT 
  | 19 -> TOKEN_EXTRA 
  | 20 -> TOKEN_XCODE 
  | 21 -> TOKEN_NUMBER 
  | 24 -> TOKEN_end_of_input
  | 22 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_header 
    | 3 -> NONTERM_header 
    | 4 -> NONTERM_header 
    | 5 -> NONTERM_footer 
    | 6 -> NONTERM_footer 
    | 7 -> NONTERM_footer 
    | 8 -> NONTERM_optfooterpercent 
    | 9 -> NONTERM_optfooterpercent 
    | 10 -> NONTERM_optfooterpercent 
    | 11 -> NONTERM_optblocks 
    | 12 -> NONTERM_optblocks 
    | 13 -> NONTERM_blocks 
    | 14 -> NONTERM_blocks 
    | 15 -> NONTERM_blockwithend 
    | 16 -> NONTERM_blockwithend 
    | 17 -> NONTERM_block 
    | 18 -> NONTERM_block 
    | 19 -> NONTERM_newlines 
    | 20 -> NONTERM_newlines 
    | 21 -> NONTERM_instructions 
    | 22 -> NONTERM_instructions 
    | 23 -> NONTERM_instruction 
    | 24 -> NONTERM_instruction 
    | 25 -> NONTERM_instruction 
    | 26 -> NONTERM_instruction 
    | 27 -> NONTERM_instruction 
    | 28 -> NONTERM_instruction 
    | 29 -> NONTERM_instruction 
    | 30 -> NONTERM_instruction 
    | 31 -> NONTERM_instruction 
    | 32 -> NONTERM_escape 
    | 33 -> NONTERM_escape 
    | 34 -> NONTERM_code 
    | 35 -> NONTERM_optcomments 
    | 36 -> NONTERM_optcomments 
    | 37 -> NONTERM_comments 
    | 38 -> NONTERM_comments 
    | 39 -> NONTERM_comment 
    | 40 -> NONTERM_extra 
    | 41 -> NONTERM_file 
    | 42 -> NONTERM_setvariable 
    | 43 -> NONTERM_value 
    | 44 -> NONTERM_value 
    | 45 -> NONTERM_value 
    | 46 -> NONTERM_value 
    | 47 -> NONTERM_value 
    | 48 -> NONTERM_op 
    | 49 -> NONTERM_op 
    | 50 -> NONTERM_op 
    | 51 -> NONTERM_op 
    | 52 -> NONTERM_op 
    | 53 -> NONTERM_op 
    | 54 -> NONTERM_dprintcommand 
    | 55 -> NONTERM_dprintblock 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 24 
let _fsyacc_tagOfErrorTerminal = 22

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | DPRINT _ -> "DPRINT" 
  | PCLOS  -> "PCLOS" 
  | POPEN  -> "POPEN" 
  | FUNC _ -> "FUNC" 
  | OP _ -> "OP" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | EOF _ -> "EOF" 
  | NEWLINE _ -> "NEWLINE" 
  | PERCENT  -> "PERCENT" 
  | ESCAPE  -> "ESCAPE" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | VARPREFIX  -> "VARPREFIX" 
  | EQSYMB  -> "EQSYMB" 
  | STARTCOMMENT  -> "STARTCOMMENT" 
  | ENDCOMMENT  -> "ENDCOMMENT" 
  | FILE _ -> "FILE" 
  | COMMENT _ -> "COMMENT" 
  | EXTRA _ -> "EXTRA" 
  | XCODE _ -> "XCODE" 
  | NUMBER _ -> "NUMBER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | DPRINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PCLOS  -> (null : System.Object) 
  | POPEN  -> (null : System.Object) 
  | FUNC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NEWLINE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PERCENT  -> (null : System.Object) 
  | ESCAPE  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | VARPREFIX  -> (null : System.Object) 
  | EQSYMB  -> (null : System.Object) 
  | STARTCOMMENT  -> (null : System.Object) 
  | ENDCOMMENT  -> (null : System.Object) 
  | FILE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EXTRA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | XCODE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;3us;65535us;0us;2us;6us;7us;9us;10us;2us;65535us;3us;4us;13us;14us;2us;65535us;3us;11us;13us;11us;1us;65535us;2us;3us;1us;65535us;2us;18us;2us;65535us;2us;19us;18us;20us;2us;65535us;2us;21us;18us;21us;1us;65535us;21us;22us;2us;65535us;2us;25us;18us;25us;1us;65535us;25us;28us;1us;65535us;25us;29us;1us;65535us;25us;30us;0us;65535us;4us;65535us;0us;5us;6us;5us;9us;5us;42us;43us;5us;65535us;0us;42us;6us;42us;9us;42us;25us;32us;42us;42us;1us;65535us;25us;33us;1us;65535us;25us;34us;1us;65535us;25us;31us;10us;65535us;40us;41us;47us;48us;49us;61us;56us;57us;58us;61us;67us;61us;68us;61us;69us;61us;70us;61us;72us;61us;7us;65535us;49us;50us;58us;59us;67us;62us;68us;63us;69us;64us;70us;65us;72us;66us;2us;65535us;25us;37us;77us;78us;2us;65535us;2us;24us;18us;24us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;7us;10us;13us;15us;17us;20us;23us;25us;28us;30us;32us;34us;35us;40us;46us;48us;50us;52us;63us;71us;74us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;2us;1us;7us;1us;3us;1us;3us;1us;3us;1us;4us;1us;4us;1us;4us;2us;5us;10us;1us;5us;1us;6us;2us;6us;7us;1us;7us;1us;9us;1us;10us;2us;12us;14us;1us;13us;1us;14us;2us;15us;16us;2us;15us;20us;1us;16us;1us;17us;2us;18us;22us;1us;19us;1us;20us;1us;22us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;30us;1us;31us;2us;32us;33us;1us;33us;1us;34us;1us;34us;2us;37us;38us;1us;38us;1us;39us;1us;40us;1us;41us;1us;42us;1us;42us;1us;42us;5us;42us;49us;50us;51us;52us;1us;43us;1us;44us;1us;44us;1us;45us;1us;45us;1us;46us;1us;46us;1us;47us;5us;47us;49us;50us;51us;52us;1us;47us;1us;48us;5us;49us;49us;50us;51us;52us;5us;49us;50us;50us;51us;52us;5us;49us;50us;51us;51us;52us;5us;49us;50us;51us;52us;52us;5us;49us;50us;51us;52us;53us;1us;49us;1us;50us;1us;51us;1us;52us;1us;53us;1us;53us;1us;53us;1us;54us;1us;54us;1us;55us;1us;55us;1us;55us;1us;55us;1us;55us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;11us;13us;15us;17us;19us;21us;23us;26us;28us;30us;33us;35us;37us;39us;42us;44us;46us;49us;52us;54us;56us;59us;61us;63us;65us;67us;69us;71us;73us;75us;77us;79us;81us;83us;86us;88us;90us;92us;95us;97us;99us;101us;103us;105us;107us;109us;115us;117us;119us;121us;123us;125us;127us;129us;131us;137us;139us;141us;147us;153us;159us;165us;171us;173us;175us;177us;179us;181us;183us;185us;187us;189us;191us;193us;195us;197us;|]
let _fsyacc_action_rows = 81
let _fsyacc_actionTableElements = [|2us;16386us;9us;8us;18us;44us;0us;49152us;9us;16395us;0us;16405us;1us;16405us;2us;76us;10us;16405us;13us;16405us;17us;16405us;18us;16405us;19us;16405us;20us;16405us;2us;16392us;8us;13us;9us;16us;1us;16385us;8us;15us;1us;32768us;8us;6us;2us;16386us;9us;8us;18us;44us;0us;16387us;1us;32768us;8us;9us;2us;16386us;9us;8us;18us;44us;0us;16388us;2us;32768us;7us;12us;8us;17us;0us;16389us;2us;16392us;8us;13us;9us;16us;1us;16390us;8us;15us;0us;16391us;0us;16393us;0us;16394us;9us;16396us;0us;16405us;1us;16405us;2us;76us;10us;16405us;13us;16405us;17us;16405us;18us;16405us;19us;16405us;20us;16405us;0us;16397us;0us;16398us;2us;32768us;7us;23us;8us;26us;1us;16399us;8us;27us;0us;16400us;0us;16401us;9us;16402us;0us;74us;1us;36us;2us;35us;10us;38us;13us;47us;17us;46us;18us;44us;19us;45us;20us;40us;0us;16403us;0us;16404us;0us;16406us;0us;16407us;0us;16408us;0us;16409us;0us;16410us;0us;16411us;0us;16412us;0us;16413us;0us;16414us;0us;16415us;1us;16416us;21us;39us;0us;16417us;5us;32768us;5us;58us;11us;54us;12us;52us;13us;56us;21us;51us;0us;16418us;1us;16421us;18us;44us;0us;16422us;0us;16423us;0us;16424us;0us;16425us;5us;32768us;5us;58us;11us;54us;12us;52us;13us;56us;21us;51us;1us;32768us;14us;49us;6us;32768us;3us;71us;5us;58us;11us;54us;12us;52us;13us;56us;21us;51us;4us;16426us;4us;69us;10us;70us;11us;68us;12us;67us;0us;16427us;1us;32768us;21us;53us;0us;16428us;1us;32768us;21us;55us;0us;16429us;5us;32768us;5us;58us;11us;54us;12us;52us;13us;56us;21us;51us;0us;16430us;6us;32768us;3us;71us;5us;58us;11us;54us;12us;52us;13us;56us;21us;51us;5us;32768us;4us;69us;6us;60us;10us;70us;11us;68us;12us;67us;0us;16431us;0us;16432us;4us;16433us;4us;69us;10us;70us;11us;68us;12us;67us;4us;16434us;4us;69us;10us;70us;11us;68us;12us;67us;4us;16435us;4us;69us;10us;70us;11us;68us;12us;67us;4us;16436us;4us;69us;10us;70us;11us;68us;12us;67us;5us;32768us;4us;69us;6us;73us;10us;70us;11us;68us;12us;67us;6us;32768us;3us;71us;5us;58us;11us;54us;12us;52us;13us;56us;21us;51us;6us;32768us;3us;71us;5us;58us;11us;54us;12us;52us;13us;56us;21us;51us;6us;32768us;3us;71us;5us;58us;11us;54us;12us;52us;13us;56us;21us;51us;6us;32768us;3us;71us;5us;58us;11us;54us;12us;52us;13us;56us;21us;51us;1us;32768us;5us;72us;6us;32768us;3us;71us;5us;58us;11us;54us;12us;52us;13us;56us;21us;51us;0us;16437us;1us;32768us;6us;75us;0us;16438us;1us;32768us;8us;77us;1us;32768us;0us;74us;1us;32768us;8us;79us;1us;32768us;1us;80us;0us;16439us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;14us;17us;19us;21us;24us;25us;27us;30us;31us;34us;35us;38us;40us;41us;42us;43us;53us;54us;55us;58us;60us;61us;62us;72us;73us;74us;75us;76us;77us;78us;79us;80us;81us;82us;83us;84us;86us;87us;93us;94us;96us;97us;98us;99us;100us;106us;108us;115us;120us;121us;123us;124us;126us;127us;133us;134us;141us;147us;148us;149us;154us;159us;164us;169us;175us;182us;189us;196us;203us;205us;212us;213us;215us;216us;218us;220us;222us;224us;|]
let _fsyacc_reductionSymbolCounts = [|1us;3us;0us;3us;3us;2us;2us;2us;0us;1us;2us;0us;1us;1us;2us;2us;2us;1us;1us;1us;2us;0us;2us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;2us;0us;1us;1us;2us;1us;1us;1us;4us;1us;2us;2us;2us;3us;1us;3us;3us;3us;3us;4us;2us;5us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;3us;3us;3us;4us;4us;4us;5us;5us;6us;6us;7us;7us;8us;8us;9us;9us;10us;10us;11us;11us;11us;11us;11us;11us;11us;11us;11us;12us;12us;13us;14us;14us;15us;15us;16us;17us;18us;19us;20us;20us;20us;20us;20us;21us;21us;21us;21us;21us;21us;22us;23us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;65535us;65535us;65535us;16387us;65535us;65535us;16388us;65535us;16389us;65535us;65535us;16391us;16393us;16394us;65535us;16397us;16398us;65535us;65535us;16400us;16401us;65535us;16403us;16404us;16406us;16407us;16408us;16409us;16410us;16411us;16412us;16413us;16414us;16415us;65535us;16417us;65535us;16418us;65535us;16422us;16423us;16424us;16425us;65535us;65535us;65535us;65535us;16427us;65535us;16428us;65535us;16429us;65535us;16430us;65535us;65535us;16431us;16432us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16437us;65535us;16438us;65535us;65535us;65535us;65535us;16439us;|]
let _fsyacc_reductions = lazy [|
# 277 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 286 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_header in
            let _2 = parseState.GetInput(2) :?> 'gentype_optblocks in
            let _3 = parseState.GetInput(3) :?> 'gentype_footer in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                                   
                   )
# 41 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : unit));
# 299 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                           
                   )
# 45 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_header));
# 309 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_comments in
            let _2 = parseState.GetInput(2) :?> int in
            let _3 = parseState.GetInput(3) :?> 'gentype_header in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                                   eventManager.Value.AddHeaderComments _1 
                   )
# 46 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_header));
# 322 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            let _3 = parseState.GetInput(3) :?> 'gentype_header in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                                  
                   )
# 47 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_header));
# 334 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optfooterpercent in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                                eventManager.Value.NotifyEndOfFile _2 
                   )
# 51 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_footer));
# 346 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _2 = parseState.GetInput(2) :?> 'gentype_footer in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                          
                   )
# 52 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_footer));
# 358 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_footer in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                          
                   )
# 53 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_footer));
# 370 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                           
                   )
# 57 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_optfooterpercent));
# 380 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                   
                   )
# 58 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_optfooterpercent));
# 390 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optfooterpercent in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                                    
                   )
# 59 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_optfooterpercent));
# 402 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                           
                   )
# 63 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_optblocks));
# 412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_blocks in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                  
                   )
# 64 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_optblocks));
# 423 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_blockwithend in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                        
                   )
# 68 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_blocks));
# 434 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_blocks in
            let _2 = parseState.GetInput(2) :?> 'gentype_blockwithend in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                               
                   )
# 69 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_blocks));
# 446 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            let _2 = parseState.GetInput(2) :?> 'gentype_newlines in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                          eventManager.Value.NotifyNewBlock _1 _2 
                   )
# 73 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_blockwithend));
# 458 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                     eventManager.Value.NotifyNewBlock _1 _2; eventManager.Value.NotifyEndOfFile _2 
                   )
# 74 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_blockwithend));
# 470 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_dprintblock in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                       eventManager.Value.AddBlock [ _1 ] 
                   )
# 78 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_block));
# 481 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_instructions in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                        eventManager.Value.AddBlock (List.rev _1) 
                   )
# 79 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_block));
# 492 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                   _1 
                   )
# 83 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_newlines));
# 503 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_newlines in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                            _2 
                   )
# 84 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_newlines));
# 515 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                           [] 
                   )
# 88 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instructions));
# 525 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_instructions in
            let _2 = parseState.GetInput(2) :?> 'gentype_instruction in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                                    _2 :: _1 
                   )
# 89 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instructions));
# 537 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_escape in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                  _1 
                   )
# 93 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instruction));
# 548 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_code in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                _1 
                   )
# 94 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instruction));
# 559 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_setvariable in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                       _1 
                   )
# 95 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instruction));
# 570 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_comment in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                   _1 
                   )
# 96 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instruction));
# 581 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_extra in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                 _1 
                   )
# 97 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instruction));
# 592 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_file in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                _1 
                   )
# 98 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instruction));
# 603 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                 POpen 
                   )
# 99 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instruction));
# 613 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                 PClos 
                   )
# 100 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instruction));
# 623 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_dprintcommand in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                         _1 
                   )
# 101 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_instruction));
# 634 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                  Escape(0) 
                   )
# 105 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_escape));
# 644 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                         Escape(_2) 
                   )
# 106 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_escape));
# 655 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> char in
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                       XCode((System.Char.ToUpper _1), _2) 
                   )
# 110 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_code));
# 667 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                           [] 
                   )
# 114 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_optcomments));
# 677 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_comments in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                    _1 
                   )
# 115 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_optcomments));
# 688 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_comment in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                   [_1] 
                   )
# 119 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_comments));
# 699 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_comment in
            let _2 = parseState.GetInput(2) :?> 'gentype_comments in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                            _1 :: _2 
                   )
# 120 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_comments));
# 711 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                   Comment(_1) 
                   )
# 124 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_comment));
# 722 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                 Extra(_1) 
                   )
# 128 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_extra));
# 733 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                File(_1) 
                   )
# 132 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_file));
# 744 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            let _4 = parseState.GetInput(4) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                                     SetVariable (_2, _4) 
                   )
# 136 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_setvariable));
# 756 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                  Number(_1) 
                   )
# 140 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_value));
# 767 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                       Number(_2) 
                   )
# 141 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_value));
# 778 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                        Number(-_2) 
                   )
# 142 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_value));
# 789 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                           eventManager.Value.ResolveVariable _2 
                   )
# 143 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_value));
# 800 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                                _2 
                   )
# 144 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_value));
# 811 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                 _1 
                   )
# 148 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_op));
# 822 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                      eventManager.Value.ApplyOperator _1 "+" _3 
                   )
# 149 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_op));
# 834 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                       eventManager.Value.ApplyOperator _1 "-" _3 
                   )
# 150 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_op));
# 846 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_op in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                    eventManager.Value.ApplyOperator _1 _2 _3 
                   )
# 151 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_op));
# 859 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                        eventManager.Value.ApplyOperator _1 "/" _3 
                   )
# 152 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_op));
# 871 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                                     eventManager.Value.ApplyFunction _1 _3 
                   )
# 153 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_op));
# 883 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                           DPrint(_1) 
                   )
# 157 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_dprintcommand));
# 894 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            let _3 = parseState.GetInput(3) :?> 'gentype_dprintcommand in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                                                                     _3 
                   )
# 161 "..\Lemoine.StandardGCodesParser\Parser.fsy"
                 : 'gentype_dprintblock));
|]
# 908 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 25;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : unit =
    engine lexer lexbuf 0 :?> _
