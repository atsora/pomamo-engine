%{
// fsharplint:disable TypeNames
// fsharplint:disable UnionCasesNames
// fsharplint:disable ParameterNames PublicValuesNames

open System
open Lemoine.StandardGCodesParser
open Lemoine.StandardGCodesParser.NcProgram

let mutable eventManager: ParseEventManager option = None
%}

%token <float> NUMBER
%token <char> XCODE
%token <string> EXTRA
%token <string> COMMENT
%token <string> FILE
%token STARTCOMMENT ENDCOMMENT
%token VARPREFIX EQSYMB
%token PLUS
%token MINUS
%token ESCAPE
%token PERCENT
%token <int> NEWLINE
%token <int> EOF

%token LBRACKET RBRACKET
%token <string> OP
%token <string> FUNC

%token POPEN
%token PCLOS
%token <string> DPRINT

%start start
%type <unit> start

%%

start: 
    header optblocks footer { }
;

header:
    { }
  | comments NEWLINE header { eventManager.Value.AddHeaderComments $1 }
  | PERCENT NEWLINE header { }
;

footer:
    optfooterpercent EOF { eventManager.Value.NotifyEndOfFile $2 }
  | NEWLINE footer { }
  | footer NEWLINE { }
;

optfooterpercent:
    { }
  | PERCENT { }
  | optfooterpercent NEWLINE { }
;

optblocks:
    { }
  | blocks { }
;

blocks:
    blockwithend { }
  | blocks blockwithend { }
;

blockwithend:
    block newlines { eventManager.Value.NotifyNewBlock $1 $2 }
  | block EOF { eventManager.Value.NotifyNewBlock $1 $2; eventManager.Value.NotifyEndOfFile $2 }
;

block:
    dprintblock { eventManager.Value.AddBlock [ $1 ] }
  | instructions { eventManager.Value.AddBlock (List.rev $1) }
;

newlines:
    NEWLINE { $1 }
  | newlines NEWLINE { $2 }
;

instructions:
    { [] }
  | instructions instruction { $2 :: $1 }
;

instruction:
    escape { $1 }
  | code { $1 }
  | setvariable { $1 }
  | comment { $1 }
  | extra { $1 }
  | file { $1 }
  | POPEN { POpen }
  | PCLOS { PClos }
  | dprintcommand { $1 }
;

escape:
    ESCAPE { Escape(0) }
  | ESCAPE NUMBER { Escape($2) }
;

code:
    XCODE value { XCode((System.Char.ToUpper $1), $2) }
;

optcomments:
    { [] }
  | comments { $1 }
;

comments:
    comment { [$1] }
  | comment comments { $1 :: $2 }
;

comment:
    COMMENT { Comment($1) }
;

extra:
    EXTRA { Extra($1) }
;

file:
    FILE { File($1) }
;

setvariable:
    VARPREFIX value EQSYMB op { SetVariable ($2, $4) }
;

value:
    NUMBER { Number($1) }
  | PLUS NUMBER { Number($2) }
  | MINUS NUMBER { Number(-$2) }
  | VARPREFIX value { eventManager.Value.ResolveVariable $2 }
  | LBRACKET op RBRACKET { $2 }
;

op:
    value { $1 }
  | op PLUS op { eventManager.Value.ApplyOperator $1 "+" $3 }
  | op MINUS op { eventManager.Value.ApplyOperator $1 "-" $3 }
  | op OP op { eventManager.Value.ApplyOperator $1 $2 $3 }
  | op ESCAPE op { eventManager.Value.ApplyOperator $1 "/" $3 }
  | FUNC LBRACKET op RBRACKET { eventManager.Value.ApplyFunction $1 $3 }
;

dprintcommand:
    DPRINT RBRACKET { DPrint($1) }
;

dprintblock:
    POPEN NEWLINE dprintcommand NEWLINE PCLOS { $3 }
;

%%
