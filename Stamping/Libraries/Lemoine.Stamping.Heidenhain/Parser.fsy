%{
// fsharplint:disable TypeNames
// fsharplint:disable UnionCasesNames
// fsharplint:disable ParameterNames PublicValuesNames

open System
open Lemoine.Stamping.Heidenhain
open Lemoine.Stamping.Heidenhain.NcProgram

let log = Lemoine.Core.Log.LogManager.GetLogger("Lemoine.Stamping.Heidenhain.Parser")

let mutable eventManager: ParseEventManager option = None
%}

%token <int> NATURAL
%token <float> NUMBER
%token <string> COMMENT
%token EQSYMB
%token <string> VARPREFIX
%token <string> STRVARPREFIX
%token QCODE DECLARESTRING
%token SETUNDEFINED ISDEFINED ISUNDEFINED
%token IF GOTO
%token STOP
%token <int> NEWLINE
%token <int> EOF

%token LBRACKET RBRACKET
%token <string> SIGN
%token <string> OP
%token <string> COMPARISON
%token <string> FUNC
%token <string> POSTFUNC
%token <string> CONST
%token <string> UNIT
%token FN COLON
%token <string> DIVERSEFUNCTION

%token <string * string list * int> COMMAND
%token <string> ENDPGM
%token TOOLCALL
%token PATTERNDEF
%token <string> POSX
%token CALLLBL
%token REP
%token LBL
%token LINE LP LN
%token APPR DEP
%token LEN R CCA
%token <string> APPROACHSTRATEGY
%token CHF CC C CP CR CT CTP RND FK
%token <string> RADIUSCOMPENSATION
%token <string> DRPLUS
%token <string> DRMINUS
%token <string> POLAR
%token FAUTO
%token FMAX
%token <string> FUNIT
%token FCODE
%token SCODE
%token MCODE
%token<string * string list * int> MCOMMAND
%token <string> TOOLOVERSIZE
%token <string> AXIS
%token <string> QUOTED

%start start
%type <unit> start

%%

start:
    header blocks eof { }
  | header blocks { }
;

header:
    NATURAL COMMAND { eventManager.Value.RecordBeginPgm $2 }
;

eof:
    EOF { log.Trace "eof"; eventManager.Value.NotifyEndOfFile $1 }
;

blocks:
    { }
  | blocks blockwithend { }
;

blockwithend:
    block { log.Trace "blockwithend"; eventManager.Value.NotifyNewBlock $1 }
;

block:
    NATURAL blockcontent { begin if log.IsTraceEnabled then log.Trace $"block with line {$1}" end; eventManager.Value.RecordLineNumber $1; $2 }
  | blockcontent { log.Trace $"block with no line number"; $1 }
;

blockcontent:
    command { log.Trace $"blockcontent.command"; $1 }
  | linecontent optcomment NEWLINE { blockOfLineNumber $3 }
  | path mcommand { eventManager.Value.AddPath (setMCommand $1 $2); blockOfMCommand $2 }
  | linepolar mcommand { blockOfMCommand $2 }
  | circlepolar mcommand { blockOfMCommand $2 }
  | circlebyradius mcommand { blockOfMCommand $2 }
  | circletangential mcommand { blockOfMCommand $2 }
  | circletangentialpolar mcommand { blockOfMCommand $2 } 
;

command:
    COMMAND arguments { begin if log.IsTraceEnabled then log.Trace $"command {$1} {$2}" end; let stampVariable = eventManager.Value.AddCommand $1 $2 in blockOfCommand $1 $2 stampVariable }
;

arguments:
    { [] }
  | arguments argument { $2 :: $1 }
;

argument:
    varprefix NATURAL EQSYMB value optcomment NEWLINE { ($1, $2, $4, $6) }
;

linecontent:
    { }
  | TOOLCALL toolid toolaxis toolcalloptions { eventManager.Value.CallTool $2 $3 $4 }
  | path { eventManager.Value.AddPath $1 }
  | approach { }
  | chamfer { }
  | round { }
  | circlecenter { eventManager.Value.SetCircleCenter $1 }
  | circlebyradius { }
  | circletangential { }
  | calllbl { eventManager.Value.CallLbl $1 }
  | lbl { eventManager.Value.RecordLbl $1 }
  | FN NATURAL COLON setvariable { }
  | FN NATURAL COLON IF condition GOTO lbl { }
  | setvariable { }
  | patterndef { }
  | stop { eventManager.Value.AddStop $1 }
;

path:
    line { $1 }
  | circle { $1 }
;

toolid:
    { None }
  | id { Some($1) }
;

toolaxis:
    { None }
  | AXIS { Some($1)}
;

toolcalloptions:
    { [] }
  | toolcalloptions toolcalloption { $2 :: $1 }
;

toolcalloption:
    TOOLOVERSIZE value { ToolOversize(XValue($1, $2)) }
  | DRPLUS value { ToolOversize(XValue("DR", $2)) }
  | DRMINUS value { ToolOversize(XValue("DR", eventManager.Value.ApplyOperator (Number(0.)) "-" $2)) }
  | FCODE value { ToolFeedRate($2) }
  | SCODE value { ToolSpindleSpeed($2) }
  | FUNIT { ToolFeedUnit($1) }
;

pathdetails:
    { createPathInstruction "" }
  | pathdetails directionrotation { setDirectionRotation $1 $2 }
  | pathdetails RADIUSCOMPENSATION { setRadiusCompensation $1 (radiusCompensationOfString $2) }
  | pathdetails coordinates { setCoordinates $1 $2 }
  | pathdetails feedrate { setFeedRate $1 $2 }
  | pathdetails spindlespeed { setSpindleSpeed $1 $2 }
  | pathdetails mcode { addMCode $1 $2 }
;

line:
    linedetails { setPathFunction $1 "L" }
  | LINE linedetails { setPathFunction $2 "L" }
  | LN linedetails { setPathFunction $2 "LN" }
;

linedetails:
    { createPathInstruction "L" }
  | linedetails RADIUSCOMPENSATION { setRadiusCompensation $1 (radiusCompensationOfString $2) }
  | linedetails coordinates { setCoordinates $1 $2 }
  | linedetails feedrate { setFeedRate $1 $2 }
  | linedetails spindlespeed { setSpindleSpeed $1 $2 }
  | linedetails mcode { addMCode $1 $2 }
;

linepolar:
    { }
  | linepolar RADIUSCOMPENSATION { }
  | linepolar polarcoordinates { }
  | linepolar feedrate { }
  | linepolar spindlespeed { }
  | linepolar mcode { }
  | LP linepolar { $2 }
;

approach:
    APPR APPROACHSTRATEGY coordinates { }
  | APPR CT coordinates {}
  | DEP APPROACHSTRATEGY { }
  | approach LEN value { }
  | approach CCA value { }
  | approach RADIUSCOMPENSATION { }
  | approach feedrate { }
;

chamfer:
    CHF value { }
  | chamfer feedrate { }
;

round:
    RND R value { }
  | round feedrate { }
;

circlecenter:
  CC coordinates { $2 }
;

circle:
  C pathdetails { setPathFunction $2 "C" }
;

circlepolar:
    CP polarcoordinates { }
  | circlepolar directionrotation { }
  | circlepolar feedrate { }
  | circlepolar mcode { }
;

circlebyradius:
    CR coordinates { }
  | circlebyradius R value { }
  | circlebyradius directionrotation { }
  | circlebyradius feedrate { }
  | circlebyradius mcode { }
;

circletangential:
    CT coordinates { }
  | circletangential feedrate { }
  | circletangential mcode { }
;

circletangentialpolar:
    CTP polarcoordinates { }
  | circletangentialpolar feedrate { }
  | circletangentialpolar mcode { }
;

directionrotation:
    DRPLUS { directionRotationOfString $1 }
  | DRMINUS { directionRotationOfString $1 }
;

coordinates:
    { [] }
  | coordinates coordinate { $2 :: $1 }
;

coordinate:
    AXIS value { XValue($1, $2) }
  | C value { XValue("C", $2) }
;

polarcoordinates:
    { [] }
  | polarcoordinates polarcoordinate { $2 :: $1 }
;

polarcoordinate:
    POLAR value { XValue($1, $2) }
;

feedrate:
    FCODE value { FValue($2) }
  | FAUTO { FAuto }
  | FMAX { FMax }
;

spindlespeed:
    SCODE value { $2 }
;

mcommand:
    MCOMMAND { $1 }
;

mcode:
    MCODE NATURAL { float $2 }
  | MCODE NUMBER { $2 }
;

calllbl:
    CALLLBL id REP NATURAL { ($2,$4) }
  | CALLLBL id { ($2,1) }
;

lbl:
    LBL id { $2 }
;

optcomment:
    { None }
  | comment { Some($1) }
;

comment:
    COMMENT { eventManager.Value.NotifyComment($1); $1 }
;

varprefix:
    QCODE { "Q" }
  | VARPREFIX { $1 }
  | STRVARPREFIX { $1 }
;

setvariable:
    varprefix NATURAL EQSYMB op { eventManager.Value.SetVariable $1 $2 $4 }
  | varprefix NATURAL SETUNDEFINED { eventManager.Value.ResetVariable $1 $2 }
  | DECLARESTRING STRVARPREFIX NATURAL EQSYMB QUOTED { eventManager.Value.SetVariable $2 $3 (Str($5)) }
;

value:
    NATURAL { Number(float $1) }
  | NUMBER { Number($1) }
  | CONST { constToNumber $1 }
  | SIGN value { eventManager.Value.ApplyOperator (Number(0.)) $1 $2 }
  | varprefix NATURAL { eventManager.Value.ResolveVariable $1 $2 }
  | LBRACKET op RBRACKET { $2 }
  | QUOTED { Str($1) }
;

id:
    value { $1 }
;

op:
    op2 { $1 }
  | op SIGN op { eventManager.Value.ApplyOperator $1 $2 $3 }
;

op2:
    value { $1 }
  | op2 OP op2 { eventManager.Value.ApplyOperator $1 $2 $3 }
  | FUNC value { eventManager.Value.ApplyFunction $1 $2 }
  | LN value { eventManager.Value.ApplyFunction "LN" $2 }
;

condition:
    value COMPARISON value { eventManager.Value.ApplyComparison $1 $2 $3 }
  | varprefix NATURAL ISDEFINED { eventManager.Value.IsDefined $1 $2 }
  | varprefix NATURAL ISUNDEFINED { not (eventManager.Value.IsDefined $1 $2) }
;

patterndef:
  PATTERNDEF patterndefargs { }
;

patterndefargs:
    { [] }
  | patterndefargs patterndefarg { $2 :: $1 }
;

patterndefarg:
  POSX LBRACKET coordinates RBRACKET { ($1, $3) }
;

stop:
  STOP MCODE NATURAL { $3 }
;

%%
