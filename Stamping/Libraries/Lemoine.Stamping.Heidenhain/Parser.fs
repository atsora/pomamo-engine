(*
 * Copyright (C) 2009-2023 Lemoine Automation Technologies
 *
 * SPDX-License-Identifier: Apache-2.0
 *)


// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"

// fsharplint:disable TypeNames
// fsharplint:disable UnionCasesNames
// fsharplint:disable ParameterNames PublicValuesNames

open System
open Lemoine.Stamping.Heidenhain
open Lemoine.Stamping.Heidenhain.NcProgram

let log = Lemoine.Core.Log.LogManager.GetLogger("Lemoine.Stamping.Heidenhain.Parser")

let mutable eventManager: ParseEventManager option = None

# 20 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | QUOTED of (string)
  | AXIS of (string)
  | TOOLOVERSIZE of (string)
  | MCOMMAND of (string * string list * int)
  | MCODE
  | SCODE
  | FCODE
  | FUNIT of (string)
  | FMAX
  | FAUTO
  | POLAR of (string)
  | DRMINUS of (string)
  | DRPLUS of (string)
  | RADIUSCOMPENSATION of (string)
  | CHF
  | CC
  | C
  | CP
  | CR
  | CT
  | CTP
  | RND
  | FK
  | APPROACHSTRATEGY of (string)
  | LEN
  | R
  | CCA
  | APPR
  | DEP
  | LINE
  | LP
  | LN
  | LBL
  | REP
  | CALLLBL
  | POSX of (string)
  | PATTERNDEF
  | TOOLCALL
  | ENDPGM of (string)
  | COMMAND of (string * string list * int)
  | DIVERSEFUNCTION of (string)
  | FN
  | COLON
  | UNIT of (string)
  | CONST of (string)
  | POSTFUNC of (string)
  | FUNC of (string)
  | COMPARISON of (string)
  | OP of (string)
  | SIGN of (string)
  | LBRACKET
  | RBRACKET
  | EOF of (int)
  | NEWLINE of (int)
  | STOP
  | IF
  | GOTO
  | SETUNDEFINED
  | ISDEFINED
  | ISUNDEFINED
  | QCODE
  | DECLARESTRING
  | STRVARPREFIX of (string)
  | VARPREFIX of (string)
  | EQSYMB
  | COMMENT of (string)
  | NUMBER of (float)
  | NATURAL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_QUOTED
    | TOKEN_AXIS
    | TOKEN_TOOLOVERSIZE
    | TOKEN_MCOMMAND
    | TOKEN_MCODE
    | TOKEN_SCODE
    | TOKEN_FCODE
    | TOKEN_FUNIT
    | TOKEN_FMAX
    | TOKEN_FAUTO
    | TOKEN_POLAR
    | TOKEN_DRMINUS
    | TOKEN_DRPLUS
    | TOKEN_RADIUSCOMPENSATION
    | TOKEN_CHF
    | TOKEN_CC
    | TOKEN_C
    | TOKEN_CP
    | TOKEN_CR
    | TOKEN_CT
    | TOKEN_CTP
    | TOKEN_RND
    | TOKEN_FK
    | TOKEN_APPROACHSTRATEGY
    | TOKEN_LEN
    | TOKEN_R
    | TOKEN_CCA
    | TOKEN_APPR
    | TOKEN_DEP
    | TOKEN_LINE
    | TOKEN_LP
    | TOKEN_LN
    | TOKEN_LBL
    | TOKEN_REP
    | TOKEN_CALLLBL
    | TOKEN_POSX
    | TOKEN_PATTERNDEF
    | TOKEN_TOOLCALL
    | TOKEN_ENDPGM
    | TOKEN_COMMAND
    | TOKEN_DIVERSEFUNCTION
    | TOKEN_FN
    | TOKEN_COLON
    | TOKEN_UNIT
    | TOKEN_CONST
    | TOKEN_POSTFUNC
    | TOKEN_FUNC
    | TOKEN_COMPARISON
    | TOKEN_OP
    | TOKEN_SIGN
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_EOF
    | TOKEN_NEWLINE
    | TOKEN_STOP
    | TOKEN_IF
    | TOKEN_GOTO
    | TOKEN_SETUNDEFINED
    | TOKEN_ISDEFINED
    | TOKEN_ISUNDEFINED
    | TOKEN_QCODE
    | TOKEN_DECLARESTRING
    | TOKEN_STRVARPREFIX
    | TOKEN_VARPREFIX
    | TOKEN_EQSYMB
    | TOKEN_COMMENT
    | TOKEN_NUMBER
    | TOKEN_NATURAL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_header
    | NONTERM_eof
    | NONTERM_blocks
    | NONTERM_blockwithend
    | NONTERM_block
    | NONTERM_blockcontent
    | NONTERM_command
    | NONTERM_arguments
    | NONTERM_argument
    | NONTERM_linecontent
    | NONTERM_path
    | NONTERM_toolid
    | NONTERM_toolaxis
    | NONTERM_toolcalloptions
    | NONTERM_toolcalloption
    | NONTERM_pathdetails
    | NONTERM_line
    | NONTERM_linedetails
    | NONTERM_linepolar
    | NONTERM_approach
    | NONTERM_chamfer
    | NONTERM_round
    | NONTERM_circlecenter
    | NONTERM_circle
    | NONTERM_circlepolar
    | NONTERM_circlebyradius
    | NONTERM_circletangential
    | NONTERM_circletangentialpolar
    | NONTERM_directionrotation
    | NONTERM_coordinates
    | NONTERM_coordinate
    | NONTERM_polarcoordinates
    | NONTERM_polarcoordinate
    | NONTERM_feedrate
    | NONTERM_spindlespeed
    | NONTERM_mcommand
    | NONTERM_mcode
    | NONTERM_calllbl
    | NONTERM_lbl
    | NONTERM_optcomment
    | NONTERM_comment
    | NONTERM_varprefix
    | NONTERM_setvariable
    | NONTERM_value
    | NONTERM_id
    | NONTERM_op
    | NONTERM_op2
    | NONTERM_condition
    | NONTERM_patterndef
    | NONTERM_patterndefargs
    | NONTERM_patterndefarg
    | NONTERM_stop

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | QUOTED _ -> 0 
  | AXIS _ -> 1 
  | TOOLOVERSIZE _ -> 2 
  | MCOMMAND _ -> 3 
  | MCODE  -> 4 
  | SCODE  -> 5 
  | FCODE  -> 6 
  | FUNIT _ -> 7 
  | FMAX  -> 8 
  | FAUTO  -> 9 
  | POLAR _ -> 10 
  | DRMINUS _ -> 11 
  | DRPLUS _ -> 12 
  | RADIUSCOMPENSATION _ -> 13 
  | CHF  -> 14 
  | CC  -> 15 
  | C  -> 16 
  | CP  -> 17 
  | CR  -> 18 
  | CT  -> 19 
  | CTP  -> 20 
  | RND  -> 21 
  | FK  -> 22 
  | APPROACHSTRATEGY _ -> 23 
  | LEN  -> 24 
  | R  -> 25 
  | CCA  -> 26 
  | APPR  -> 27 
  | DEP  -> 28 
  | LINE  -> 29 
  | LP  -> 30 
  | LN  -> 31 
  | LBL  -> 32 
  | REP  -> 33 
  | CALLLBL  -> 34 
  | POSX _ -> 35 
  | PATTERNDEF  -> 36 
  | TOOLCALL  -> 37 
  | ENDPGM _ -> 38 
  | COMMAND _ -> 39 
  | DIVERSEFUNCTION _ -> 40 
  | FN  -> 41 
  | COLON  -> 42 
  | UNIT _ -> 43 
  | CONST _ -> 44 
  | POSTFUNC _ -> 45 
  | FUNC _ -> 46 
  | COMPARISON _ -> 47 
  | OP _ -> 48 
  | SIGN _ -> 49 
  | LBRACKET  -> 50 
  | RBRACKET  -> 51 
  | EOF _ -> 52 
  | NEWLINE _ -> 53 
  | STOP  -> 54 
  | IF  -> 55 
  | GOTO  -> 56 
  | SETUNDEFINED  -> 57 
  | ISDEFINED  -> 58 
  | ISUNDEFINED  -> 59 
  | QCODE  -> 60 
  | DECLARESTRING  -> 61 
  | STRVARPREFIX _ -> 62 
  | VARPREFIX _ -> 63 
  | EQSYMB  -> 64 
  | COMMENT _ -> 65 
  | NUMBER _ -> 66 
  | NATURAL _ -> 67 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_QUOTED 
  | 1 -> TOKEN_AXIS 
  | 2 -> TOKEN_TOOLOVERSIZE 
  | 3 -> TOKEN_MCOMMAND 
  | 4 -> TOKEN_MCODE 
  | 5 -> TOKEN_SCODE 
  | 6 -> TOKEN_FCODE 
  | 7 -> TOKEN_FUNIT 
  | 8 -> TOKEN_FMAX 
  | 9 -> TOKEN_FAUTO 
  | 10 -> TOKEN_POLAR 
  | 11 -> TOKEN_DRMINUS 
  | 12 -> TOKEN_DRPLUS 
  | 13 -> TOKEN_RADIUSCOMPENSATION 
  | 14 -> TOKEN_CHF 
  | 15 -> TOKEN_CC 
  | 16 -> TOKEN_C 
  | 17 -> TOKEN_CP 
  | 18 -> TOKEN_CR 
  | 19 -> TOKEN_CT 
  | 20 -> TOKEN_CTP 
  | 21 -> TOKEN_RND 
  | 22 -> TOKEN_FK 
  | 23 -> TOKEN_APPROACHSTRATEGY 
  | 24 -> TOKEN_LEN 
  | 25 -> TOKEN_R 
  | 26 -> TOKEN_CCA 
  | 27 -> TOKEN_APPR 
  | 28 -> TOKEN_DEP 
  | 29 -> TOKEN_LINE 
  | 30 -> TOKEN_LP 
  | 31 -> TOKEN_LN 
  | 32 -> TOKEN_LBL 
  | 33 -> TOKEN_REP 
  | 34 -> TOKEN_CALLLBL 
  | 35 -> TOKEN_POSX 
  | 36 -> TOKEN_PATTERNDEF 
  | 37 -> TOKEN_TOOLCALL 
  | 38 -> TOKEN_ENDPGM 
  | 39 -> TOKEN_COMMAND 
  | 40 -> TOKEN_DIVERSEFUNCTION 
  | 41 -> TOKEN_FN 
  | 42 -> TOKEN_COLON 
  | 43 -> TOKEN_UNIT 
  | 44 -> TOKEN_CONST 
  | 45 -> TOKEN_POSTFUNC 
  | 46 -> TOKEN_FUNC 
  | 47 -> TOKEN_COMPARISON 
  | 48 -> TOKEN_OP 
  | 49 -> TOKEN_SIGN 
  | 50 -> TOKEN_LBRACKET 
  | 51 -> TOKEN_RBRACKET 
  | 52 -> TOKEN_EOF 
  | 53 -> TOKEN_NEWLINE 
  | 54 -> TOKEN_STOP 
  | 55 -> TOKEN_IF 
  | 56 -> TOKEN_GOTO 
  | 57 -> TOKEN_SETUNDEFINED 
  | 58 -> TOKEN_ISDEFINED 
  | 59 -> TOKEN_ISUNDEFINED 
  | 60 -> TOKEN_QCODE 
  | 61 -> TOKEN_DECLARESTRING 
  | 62 -> TOKEN_STRVARPREFIX 
  | 63 -> TOKEN_VARPREFIX 
  | 64 -> TOKEN_EQSYMB 
  | 65 -> TOKEN_COMMENT 
  | 66 -> TOKEN_NUMBER 
  | 67 -> TOKEN_NATURAL 
  | 70 -> TOKEN_end_of_input
  | 68 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_header 
    | 4 -> NONTERM_eof 
    | 5 -> NONTERM_blocks 
    | 6 -> NONTERM_blocks 
    | 7 -> NONTERM_blockwithend 
    | 8 -> NONTERM_block 
    | 9 -> NONTERM_block 
    | 10 -> NONTERM_blockcontent 
    | 11 -> NONTERM_blockcontent 
    | 12 -> NONTERM_blockcontent 
    | 13 -> NONTERM_blockcontent 
    | 14 -> NONTERM_blockcontent 
    | 15 -> NONTERM_blockcontent 
    | 16 -> NONTERM_blockcontent 
    | 17 -> NONTERM_blockcontent 
    | 18 -> NONTERM_command 
    | 19 -> NONTERM_arguments 
    | 20 -> NONTERM_arguments 
    | 21 -> NONTERM_argument 
    | 22 -> NONTERM_linecontent 
    | 23 -> NONTERM_linecontent 
    | 24 -> NONTERM_linecontent 
    | 25 -> NONTERM_linecontent 
    | 26 -> NONTERM_linecontent 
    | 27 -> NONTERM_linecontent 
    | 28 -> NONTERM_linecontent 
    | 29 -> NONTERM_linecontent 
    | 30 -> NONTERM_linecontent 
    | 31 -> NONTERM_linecontent 
    | 32 -> NONTERM_linecontent 
    | 33 -> NONTERM_linecontent 
    | 34 -> NONTERM_linecontent 
    | 35 -> NONTERM_linecontent 
    | 36 -> NONTERM_linecontent 
    | 37 -> NONTERM_linecontent 
    | 38 -> NONTERM_path 
    | 39 -> NONTERM_path 
    | 40 -> NONTERM_toolid 
    | 41 -> NONTERM_toolid 
    | 42 -> NONTERM_toolaxis 
    | 43 -> NONTERM_toolaxis 
    | 44 -> NONTERM_toolcalloptions 
    | 45 -> NONTERM_toolcalloptions 
    | 46 -> NONTERM_toolcalloption 
    | 47 -> NONTERM_toolcalloption 
    | 48 -> NONTERM_toolcalloption 
    | 49 -> NONTERM_toolcalloption 
    | 50 -> NONTERM_toolcalloption 
    | 51 -> NONTERM_toolcalloption 
    | 52 -> NONTERM_pathdetails 
    | 53 -> NONTERM_pathdetails 
    | 54 -> NONTERM_pathdetails 
    | 55 -> NONTERM_pathdetails 
    | 56 -> NONTERM_pathdetails 
    | 57 -> NONTERM_pathdetails 
    | 58 -> NONTERM_pathdetails 
    | 59 -> NONTERM_line 
    | 60 -> NONTERM_line 
    | 61 -> NONTERM_line 
    | 62 -> NONTERM_linedetails 
    | 63 -> NONTERM_linedetails 
    | 64 -> NONTERM_linedetails 
    | 65 -> NONTERM_linedetails 
    | 66 -> NONTERM_linedetails 
    | 67 -> NONTERM_linedetails 
    | 68 -> NONTERM_linepolar 
    | 69 -> NONTERM_linepolar 
    | 70 -> NONTERM_linepolar 
    | 71 -> NONTERM_linepolar 
    | 72 -> NONTERM_linepolar 
    | 73 -> NONTERM_linepolar 
    | 74 -> NONTERM_linepolar 
    | 75 -> NONTERM_approach 
    | 76 -> NONTERM_approach 
    | 77 -> NONTERM_approach 
    | 78 -> NONTERM_approach 
    | 79 -> NONTERM_approach 
    | 80 -> NONTERM_approach 
    | 81 -> NONTERM_approach 
    | 82 -> NONTERM_chamfer 
    | 83 -> NONTERM_chamfer 
    | 84 -> NONTERM_round 
    | 85 -> NONTERM_round 
    | 86 -> NONTERM_circlecenter 
    | 87 -> NONTERM_circle 
    | 88 -> NONTERM_circlepolar 
    | 89 -> NONTERM_circlepolar 
    | 90 -> NONTERM_circlepolar 
    | 91 -> NONTERM_circlepolar 
    | 92 -> NONTERM_circlebyradius 
    | 93 -> NONTERM_circlebyradius 
    | 94 -> NONTERM_circlebyradius 
    | 95 -> NONTERM_circlebyradius 
    | 96 -> NONTERM_circlebyradius 
    | 97 -> NONTERM_circletangential 
    | 98 -> NONTERM_circletangential 
    | 99 -> NONTERM_circletangential 
    | 100 -> NONTERM_circletangentialpolar 
    | 101 -> NONTERM_circletangentialpolar 
    | 102 -> NONTERM_circletangentialpolar 
    | 103 -> NONTERM_directionrotation 
    | 104 -> NONTERM_directionrotation 
    | 105 -> NONTERM_coordinates 
    | 106 -> NONTERM_coordinates 
    | 107 -> NONTERM_coordinate 
    | 108 -> NONTERM_coordinate 
    | 109 -> NONTERM_polarcoordinates 
    | 110 -> NONTERM_polarcoordinates 
    | 111 -> NONTERM_polarcoordinate 
    | 112 -> NONTERM_feedrate 
    | 113 -> NONTERM_feedrate 
    | 114 -> NONTERM_feedrate 
    | 115 -> NONTERM_spindlespeed 
    | 116 -> NONTERM_mcommand 
    | 117 -> NONTERM_mcode 
    | 118 -> NONTERM_mcode 
    | 119 -> NONTERM_calllbl 
    | 120 -> NONTERM_calllbl 
    | 121 -> NONTERM_lbl 
    | 122 -> NONTERM_optcomment 
    | 123 -> NONTERM_optcomment 
    | 124 -> NONTERM_comment 
    | 125 -> NONTERM_varprefix 
    | 126 -> NONTERM_varprefix 
    | 127 -> NONTERM_varprefix 
    | 128 -> NONTERM_setvariable 
    | 129 -> NONTERM_setvariable 
    | 130 -> NONTERM_setvariable 
    | 131 -> NONTERM_value 
    | 132 -> NONTERM_value 
    | 133 -> NONTERM_value 
    | 134 -> NONTERM_value 
    | 135 -> NONTERM_value 
    | 136 -> NONTERM_value 
    | 137 -> NONTERM_value 
    | 138 -> NONTERM_id 
    | 139 -> NONTERM_op 
    | 140 -> NONTERM_op 
    | 141 -> NONTERM_op2 
    | 142 -> NONTERM_op2 
    | 143 -> NONTERM_op2 
    | 144 -> NONTERM_op2 
    | 145 -> NONTERM_condition 
    | 146 -> NONTERM_condition 
    | 147 -> NONTERM_condition 
    | 148 -> NONTERM_patterndef 
    | 149 -> NONTERM_patterndefargs 
    | 150 -> NONTERM_patterndefargs 
    | 151 -> NONTERM_patterndefarg 
    | 152 -> NONTERM_stop 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 70 
let _fsyacc_tagOfErrorTerminal = 68

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | QUOTED _ -> "QUOTED" 
  | AXIS _ -> "AXIS" 
  | TOOLOVERSIZE _ -> "TOOLOVERSIZE" 
  | MCOMMAND _ -> "MCOMMAND" 
  | MCODE  -> "MCODE" 
  | SCODE  -> "SCODE" 
  | FCODE  -> "FCODE" 
  | FUNIT _ -> "FUNIT" 
  | FMAX  -> "FMAX" 
  | FAUTO  -> "FAUTO" 
  | POLAR _ -> "POLAR" 
  | DRMINUS _ -> "DRMINUS" 
  | DRPLUS _ -> "DRPLUS" 
  | RADIUSCOMPENSATION _ -> "RADIUSCOMPENSATION" 
  | CHF  -> "CHF" 
  | CC  -> "CC" 
  | C  -> "C" 
  | CP  -> "CP" 
  | CR  -> "CR" 
  | CT  -> "CT" 
  | CTP  -> "CTP" 
  | RND  -> "RND" 
  | FK  -> "FK" 
  | APPROACHSTRATEGY _ -> "APPROACHSTRATEGY" 
  | LEN  -> "LEN" 
  | R  -> "R" 
  | CCA  -> "CCA" 
  | APPR  -> "APPR" 
  | DEP  -> "DEP" 
  | LINE  -> "LINE" 
  | LP  -> "LP" 
  | LN  -> "LN" 
  | LBL  -> "LBL" 
  | REP  -> "REP" 
  | CALLLBL  -> "CALLLBL" 
  | POSX _ -> "POSX" 
  | PATTERNDEF  -> "PATTERNDEF" 
  | TOOLCALL  -> "TOOLCALL" 
  | ENDPGM _ -> "ENDPGM" 
  | COMMAND _ -> "COMMAND" 
  | DIVERSEFUNCTION _ -> "DIVERSEFUNCTION" 
  | FN  -> "FN" 
  | COLON  -> "COLON" 
  | UNIT _ -> "UNIT" 
  | CONST _ -> "CONST" 
  | POSTFUNC _ -> "POSTFUNC" 
  | FUNC _ -> "FUNC" 
  | COMPARISON _ -> "COMPARISON" 
  | OP _ -> "OP" 
  | SIGN _ -> "SIGN" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | EOF _ -> "EOF" 
  | NEWLINE _ -> "NEWLINE" 
  | STOP  -> "STOP" 
  | IF  -> "IF" 
  | GOTO  -> "GOTO" 
  | SETUNDEFINED  -> "SETUNDEFINED" 
  | ISDEFINED  -> "ISDEFINED" 
  | ISUNDEFINED  -> "ISUNDEFINED" 
  | QCODE  -> "QCODE" 
  | DECLARESTRING  -> "DECLARESTRING" 
  | STRVARPREFIX _ -> "STRVARPREFIX" 
  | VARPREFIX _ -> "VARPREFIX" 
  | EQSYMB  -> "EQSYMB" 
  | COMMENT _ -> "COMMENT" 
  | NUMBER _ -> "NUMBER" 
  | NATURAL _ -> "NATURAL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | QUOTED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AXIS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOOLOVERSIZE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MCOMMAND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MCODE  -> (null : System.Object) 
  | SCODE  -> (null : System.Object) 
  | FCODE  -> (null : System.Object) 
  | FUNIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FMAX  -> (null : System.Object) 
  | FAUTO  -> (null : System.Object) 
  | POLAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DRMINUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DRPLUS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RADIUSCOMPENSATION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHF  -> (null : System.Object) 
  | CC  -> (null : System.Object) 
  | C  -> (null : System.Object) 
  | CP  -> (null : System.Object) 
  | CR  -> (null : System.Object) 
  | CT  -> (null : System.Object) 
  | CTP  -> (null : System.Object) 
  | RND  -> (null : System.Object) 
  | FK  -> (null : System.Object) 
  | APPROACHSTRATEGY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEN  -> (null : System.Object) 
  | R  -> (null : System.Object) 
  | CCA  -> (null : System.Object) 
  | APPR  -> (null : System.Object) 
  | DEP  -> (null : System.Object) 
  | LINE  -> (null : System.Object) 
  | LP  -> (null : System.Object) 
  | LN  -> (null : System.Object) 
  | LBL  -> (null : System.Object) 
  | REP  -> (null : System.Object) 
  | CALLLBL  -> (null : System.Object) 
  | POSX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PATTERNDEF  -> (null : System.Object) 
  | TOOLCALL  -> (null : System.Object) 
  | ENDPGM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMAND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DIVERSEFUNCTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FN  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | UNIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CONST _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | POSTFUNC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUNC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMPARISON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SIGN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NEWLINE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STOP  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | GOTO  -> (null : System.Object) 
  | SETUNDEFINED  -> (null : System.Object) 
  | ISDEFINED  -> (null : System.Object) 
  | ISUNDEFINED  -> (null : System.Object) 
  | QCODE  -> (null : System.Object) 
  | DECLARESTRING  -> (null : System.Object) 
  | STRVARPREFIX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VARPREFIX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQSYMB  -> (null : System.Object) 
  | COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NATURAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;1us;65535us;3us;4us;1us;65535us;2us;3us;1us;65535us;3us;8us;1us;65535us;3us;9us;2us;65535us;3us;12us;10us;11us;2us;65535us;3us;13us;10us;13us;1us;65535us;29us;30us;1us;65535us;30us;31us;2us;65535us;3us;14us;10us;14us;2us;65535us;3us;17us;10us;17us;1us;65535us;38us;39us;1us;65535us;39us;40us;1us;65535us;40us;41us;1us;65535us;41us;63us;1us;65535us;121us;75us;2us;65535us;3us;59us;10us;59us;4us;65535us;3us;82us;10us;82us;83us;84us;85us;86us;3us;65535us;3us;19us;10us;19us;98us;92us;2us;65535us;3us;42us;10us;42us;2us;65535us;3us;43us;10us;43us;2us;65535us;3us;44us;10us;44us;2us;65535us;3us;45us;10us;45us;2us;65535us;3us;60us;10us;60us;2us;65535us;3us;21us;10us;21us;2us;65535us;3us;23us;10us;23us;2us;65535us;3us;25us;10us;25us;2us;65535us;3us;27us;10us;27us;3us;65535us;21us;124us;23us;131us;75us;76us;10us;65535us;75us;78us;82us;88us;84us;88us;86us;88us;100us;101us;102us;103us;119us;120us;127us;128us;134us;135us;217us;144us;8us;65535us;78us;145us;88us;145us;101us;145us;103us;145us;120us;145us;128us;145us;135us;145us;144us;145us;4us;65535us;19us;94us;92us;94us;122us;123us;138us;139us;3us;65535us;94us;150us;123us;150us;139us;150us;13us;65535us;19us;95us;21us;125us;23us;132us;25us;136us;27us;140us;42us;111us;43us;114us;44us;118us;75us;79us;82us;89us;84us;89us;86us;89us;92us;95us;6us;65535us;19us;96us;75us;80us;82us;90us;84us;90us;86us;90us;92us;96us;6us;65535us;17us;18us;19us;20us;21us;22us;23us;24us;25us;26us;27us;28us;10us;65535us;19us;97us;21us;126us;23us;133us;25us;137us;27us;141us;75us;81us;82us;91us;84us;91us;86us;91us;92us;97us;2us;65535us;3us;46us;10us;46us;3us;65535us;3us;47us;10us;47us;54us;55us;2us;65535us;14us;15us;35us;36us;2us;65535us;14us;169us;35us;169us;32us;65535us;3us;174us;10us;174us;30us;32us;34us;189us;38us;189us;50us;174us;52us;190us;64us;189us;66us;189us;68us;189us;70us;189us;72us;189us;106us;189us;108us;189us;112us;189us;116us;189us;129us;189us;146us;189us;148us;189us;151us;189us;153us;189us;157us;189us;163us;189us;167us;189us;176us;189us;187us;189us;193us;189us;200us;189us;203us;189us;204us;189us;206us;189us;209us;189us;3us;65535us;3us;56us;10us;56us;50us;51us;28us;65535us;34us;35us;38us;197us;52us;208us;64us;65us;66us;67us;68us;69us;70us;71us;72us;73us;106us;107us;108us;109us;112us;113us;116us;117us;129us;130us;146us;147us;148us;149us;151us;152us;153us;154us;157us;158us;163us;197us;167us;197us;176us;201us;187us;188us;193us;201us;200us;201us;203us;201us;204us;205us;206us;207us;209us;210us;3us;65535us;38us;61us;163us;164us;167us;168us;3us;65535us;176us;177us;193us;194us;200us;199us;4us;65535us;176us;198us;193us;198us;200us;198us;203us;202us;1us;65535us;52us;53us;2us;65535us;3us;57us;10us;57us;1us;65535us;213us;214us;1us;65535us;214us;215us;2us;65535us;3us;58us;10us;58us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;7us;9us;11us;13us;16us;19us;21us;23us;26us;29us;31us;33us;35us;37us;39us;42us;47us;51us;54us;57us;60us;63us;66us;69us;72us;75us;78us;82us;93us;102us;107us;111us;125us;132us;139us;150us;153us;157us;160us;163us;196us;200us;229us;233us;237us;242us;244us;247us;249us;251us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;2us;3us;1us;2us;6us;1us;1us;1us;3us;1us;3us;1us;4us;1us;6us;1us;7us;1us;8us;1us;8us;1us;9us;1us;10us;1us;11us;1us;11us;1us;11us;2us;12us;24us;1us;12us;6us;13us;69us;70us;71us;72us;73us;1us;13us;4us;14us;89us;90us;91us;1us;14us;6us;15us;29us;93us;94us;95us;96us;1us;15us;4us;16us;30us;98us;99us;1us;16us;3us;17us;101us;102us;1us;17us;1us;18us;2us;18us;20us;1us;20us;1us;21us;1us;21us;1us;21us;1us;21us;1us;21us;1us;21us;1us;23us;1us;23us;1us;23us;2us;23us;45us;5us;25us;78us;79us;80us;81us;2us;26us;83us;2us;27us;85us;1us;28us;1us;31us;1us;32us;2us;33us;34us;2us;33us;34us;2us;33us;34us;1us;33us;1us;34us;1us;34us;1us;34us;1us;34us;1us;35us;1us;36us;1us;37us;1us;38us;1us;39us;1us;41us;1us;43us;1us;45us;1us;46us;1us;46us;1us;47us;1us;47us;1us;48us;1us;48us;1us;49us;1us;49us;1us;50us;1us;50us;1us;51us;7us;53us;54us;55us;56us;57us;58us;87us;1us;53us;1us;54us;2us;55us;106us;1us;56us;1us;57us;1us;58us;6us;59us;63us;64us;65us;66us;67us;1us;60us;6us;60us;63us;64us;65us;66us;67us;1us;61us;6us;61us;63us;64us;65us;66us;67us;1us;63us;2us;64us;106us;1us;65us;1us;66us;1us;67us;6us;69us;70us;71us;72us;73us;74us;1us;69us;2us;70us;110us;1us;71us;1us;72us;1us;73us;1us;74us;2us;75us;76us;1us;75us;2us;75us;106us;1us;76us;2us;76us;106us;1us;77us;1us;77us;1us;78us;1us;78us;1us;79us;1us;79us;1us;80us;1us;81us;1us;82us;1us;82us;1us;83us;1us;84us;1us;84us;1us;84us;1us;85us;1us;86us;2us;86us;106us;1us;87us;1us;88us;2us;88us;110us;1us;89us;1us;90us;1us;91us;1us;92us;2us;92us;106us;1us;93us;1us;93us;1us;94us;1us;95us;1us;96us;1us;97us;2us;97us;106us;1us;98us;1us;99us;1us;100us;2us;100us;110us;1us;101us;1us;102us;1us;103us;1us;104us;2us;106us;151us;1us;106us;1us;107us;1us;107us;1us;108us;1us;108us;1us;110us;1us;111us;1us;111us;1us;112us;1us;112us;1us;113us;1us;114us;1us;115us;1us;115us;1us;116us;2us;117us;118us;1us;117us;1us;118us;2us;119us;120us;2us;119us;120us;1us;119us;1us;119us;1us;121us;1us;121us;1us;123us;1us;124us;1us;125us;1us;126us;1us;127us;2us;128us;129us;2us;128us;129us;1us;128us;2us;128us;140us;1us;129us;1us;130us;1us;130us;1us;130us;1us;130us;1us;130us;1us;131us;1us;132us;1us;133us;1us;134us;1us;134us;1us;135us;3us;135us;146us;147us;1us;135us;3us;135us;146us;147us;1us;136us;2us;136us;140us;1us;136us;1us;137us;1us;138us;2us;139us;142us;2us;140us;140us;1us;140us;1us;141us;2us;142us;142us;1us;142us;1us;143us;1us;143us;1us;144us;1us;144us;1us;145us;1us;145us;1us;145us;1us;146us;1us;147us;1us;148us;2us;148us;150us;1us;150us;1us;151us;1us;151us;1us;151us;1us;152us;1us;152us;1us;152us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;11us;13us;15us;17us;19us;21us;23us;25us;27us;29us;31us;33us;35us;37us;40us;42us;49us;51us;56us;58us;65us;67us;72us;74us;78us;80us;82us;85us;87us;89us;91us;93us;95us;97us;99us;101us;103us;105us;108us;114us;117us;120us;122us;124us;126us;129us;132us;135us;137us;139us;141us;143us;145us;147us;149us;151us;153us;155us;157us;159us;161us;163us;165us;167us;169us;171us;173us;175us;177us;179us;181us;183us;191us;193us;195us;198us;200us;202us;204us;211us;213us;220us;222us;229us;231us;234us;236us;238us;240us;247us;249us;252us;254us;256us;258us;260us;263us;265us;268us;270us;273us;275us;277us;279us;281us;283us;285us;287us;289us;291us;293us;295us;297us;299us;301us;303us;305us;308us;310us;312us;315us;317us;319us;321us;323us;326us;328us;330us;332us;334us;336us;338us;341us;343us;345us;347us;350us;352us;354us;356us;358us;361us;363us;365us;367us;369us;371us;373us;375us;377us;379us;381us;383us;385us;387us;389us;391us;394us;396us;398us;401us;404us;406us;408us;410us;412us;414us;416us;418us;420us;422us;425us;428us;430us;433us;435us;437us;439us;441us;443us;445us;447us;449us;451us;453us;455us;457us;461us;463us;467us;469us;472us;474us;476us;478us;481us;484us;486us;488us;491us;493us;495us;497us;499us;501us;503us;505us;507us;509us;511us;513us;516us;518us;520us;522us;524us;526us;528us;|]
let _fsyacc_action_rows = 222
let _fsyacc_actionTableElements = [|1us;32768us;67us;5us;0us;49152us;0us;16389us;37us;16386us;1us;16446us;3us;16446us;4us;16446us;5us;16446us;6us;16446us;8us;16446us;9us;16446us;10us;16452us;13us;16446us;14us;112us;15us;119us;16us;121us;17us;122us;18us;127us;19us;134us;20us;138us;21us;115us;27us;99us;28us;104us;29us;83us;30us;98us;31us;85us;32us;167us;34us;163us;36us;213us;37us;38us;39us;29us;41us;48us;52us;7us;53us;16406us;54us;219us;60us;171us;61us;179us;62us;173us;63us;172us;65us;16406us;67us;10us;0us;16385us;1us;32768us;39us;6us;0us;16387us;0us;16388us;0us;16390us;0us;16391us;33us;16406us;1us;16446us;3us;16446us;4us;16446us;5us;16446us;6us;16446us;8us;16446us;9us;16446us;10us;16452us;13us;16446us;14us;112us;15us;119us;16us;121us;17us;122us;18us;127us;19us;134us;20us;138us;21us;115us;27us;99us;28us;104us;29us;83us;30us;98us;31us;85us;32us;167us;34us;163us;36us;213us;37us;38us;39us;29us;41us;48us;54us;219us;60us;171us;61us;179us;62us;173us;63us;172us;0us;16392us;0us;16393us;0us;16394us;1us;16506us;65us;170us;1us;32768us;53us;16us;0us;16395us;1us;16408us;3us;159us;0us;16396us;7us;16493us;3us;159us;4us;160us;5us;157us;6us;153us;8us;156us;9us;155us;13us;93us;0us;16397us;7us;32768us;3us;159us;4us;160us;6us;153us;8us;156us;9us;155us;11us;143us;12us;142us;0us;16398us;8us;16413us;3us;159us;4us;160us;6us;153us;8us;156us;9us;155us;11us;143us;12us;142us;25us;129us;0us;16399us;5us;16414us;3us;159us;4us;160us;6us;153us;8us;156us;9us;155us;0us;16400us;5us;32768us;3us;159us;4us;160us;6us;153us;8us;156us;9us;155us;0us;16401us;0us;16403us;3us;16402us;60us;171us;62us;173us;63us;172us;0us;16404us;1us;32768us;67us;33us;1us;32768us;64us;34us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;1us;16506us;65us;170us;1us;32768us;53us;37us;0us;16405us;9us;16424us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;1us;16426us;1us;62us;0us;16428us;6us;16407us;2us;64us;5us;72us;6us;70us;7us;74us;11us;68us;12us;66us;6us;16409us;6us;153us;8us;156us;9us;155us;13us;110us;24us;106us;26us;108us;3us;16410us;6us;153us;8us;156us;9us;155us;3us;16411us;6us;153us;8us;156us;9us;155us;0us;16412us;0us;16415us;0us;16416us;1us;32768us;67us;49us;1us;32768us;42us;50us;5us;32768us;55us;52us;60us;171us;61us;179us;62us;173us;63us;172us;0us;16417us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;1us;32768us;56us;54us;1us;32768us;32us;167us;0us;16418us;0us;16419us;0us;16420us;0us;16421us;0us;16422us;0us;16423us;0us;16425us;0us;16427us;0us;16429us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16430us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16431us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16432us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16433us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16434us;0us;16435us;10us;16471us;1us;16489us;4us;160us;5us;157us;6us;153us;8us;156us;9us;155us;11us;143us;12us;142us;13us;77us;16us;16489us;0us;16437us;0us;16438us;2us;16439us;1us;146us;16us;148us;0us;16440us;0us;16441us;0us;16442us;8us;16443us;1us;16489us;4us;160us;5us;157us;6us;153us;8us;156us;9us;155us;13us;87us;16us;16489us;0us;16446us;8us;16444us;1us;16489us;4us;160us;5us;157us;6us;153us;8us;156us;9us;155us;13us;87us;16us;16489us;0us;16446us;8us;16445us;1us;16489us;4us;160us;5us;157us;6us;153us;8us;156us;9us;155us;13us;87us;16us;16489us;0us;16447us;2us;16448us;1us;146us;16us;148us;0us;16449us;0us;16450us;0us;16451us;6us;16458us;4us;160us;5us;157us;6us;153us;8us;156us;9us;155us;13us;93us;0us;16453us;1us;16454us;10us;151us;0us;16455us;0us;16456us;0us;16457us;1us;16452us;30us;98us;2us;32768us;19us;102us;23us;100us;0us;16489us;2us;16459us;1us;146us;16us;148us;0us;16489us;2us;16460us;1us;146us;16us;148us;1us;32768us;23us;105us;0us;16461us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16462us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16463us;0us;16464us;0us;16465us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16466us;0us;16467us;1us;32768us;25us;116us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16468us;0us;16469us;0us;16489us;2us;16470us;1us;146us;16us;148us;0us;16436us;0us;16493us;1us;16472us;10us;151us;0us;16473us;0us;16474us;0us;16475us;0us;16489us;2us;16476us;1us;146us;16us;148us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16477us;0us;16478us;0us;16479us;0us;16480us;0us;16489us;2us;16481us;1us;146us;16us;148us;0us;16482us;0us;16483us;0us;16493us;1us;16484us;10us;151us;0us;16485us;0us;16486us;0us;16487us;0us;16488us;3us;32768us;1us;146us;16us;148us;51us;218us;0us;16490us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16491us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16492us;0us;16494us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16495us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16496us;0us;16497us;0us;16498us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16499us;0us;16500us;2us;32768us;66us;162us;67us;161us;0us;16501us;0us;16502us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;1us;16504us;33us;165us;1us;32768us;67us;166us;0us;16503us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16505us;0us;16507us;0us;16508us;0us;16509us;0us;16510us;0us;16511us;1us;32768us;67us;175us;2us;32768us;57us;178us;64us;176us;11us;32768us;0us;196us;31us;206us;44us;186us;46us;204us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;1us;16512us;49us;200us;0us;16513us;1us;32768us;62us;180us;1us;32768us;67us;181us;1us;32768us;64us;182us;1us;32768us;0us;183us;0us;16514us;0us;16515us;0us;16516us;0us;16517us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16518us;1us;32768us;67us;191us;1us;32768us;67us;192us;0us;16519us;2us;16519us;58us;211us;59us;212us;11us;32768us;0us;196us;31us;206us;44us;186us;46us;204us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;2us;32768us;49us;200us;51us;195us;0us;16520us;0us;16521us;0us;16522us;1us;16523us;48us;203us;1us;16524us;49us;200us;11us;32768us;0us;196us;31us;206us;44us;186us;46us;204us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16525us;1us;16526us;48us;203us;11us;32768us;0us;196us;31us;206us;44us;186us;46us;204us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16527us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16528us;1us;32768us;47us;209us;9us;32768us;0us;196us;44us;186us;49us;187us;50us;193us;60us;171us;62us;173us;63us;172us;66us;185us;67us;184us;0us;16529us;0us;16530us;0us;16531us;0us;16533us;1us;16532us;35us;216us;0us;16534us;1us;32768us;50us;217us;0us;16489us;0us;16535us;1us;32768us;4us;220us;1us;32768us;67us;221us;0us;16536us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;4us;42us;43us;45us;46us;47us;48us;49us;83us;84us;85us;86us;88us;90us;91us;93us;94us;102us;103us;111us;112us;121us;122us;128us;129us;135us;136us;137us;141us;142us;144us;146us;156us;158us;160us;161us;171us;173us;174us;181us;188us;192us;196us;197us;198us;199us;201us;203us;209us;210us;220us;222us;224us;225us;226us;227us;228us;229us;230us;231us;232us;233us;243us;244us;254us;255us;265us;266us;276us;277us;287us;288us;289us;300us;301us;302us;305us;306us;307us;308us;317us;318us;327us;328us;337us;338us;341us;342us;343us;344us;351us;352us;354us;355us;356us;357us;359us;362us;363us;366us;367us;370us;372us;373us;383us;384us;394us;395us;396us;397us;407us;408us;409us;411us;421us;422us;423us;424us;427us;428us;429us;431us;432us;433us;434us;435us;438us;448us;449us;450us;451us;452us;453us;456us;457us;458us;459us;461us;462us;463us;464us;465us;469us;470us;480us;481us;491us;492us;493us;503us;504us;514us;515us;516us;517us;527us;528us;529us;532us;533us;534us;544us;546us;548us;549us;559us;560us;561us;562us;563us;564us;565us;567us;570us;582us;584us;585us;587us;589us;591us;593us;594us;595us;596us;597us;607us;608us;610us;612us;613us;616us;628us;631us;632us;633us;634us;636us;638us;650us;651us;653us;665us;675us;676us;686us;687us;689us;699us;700us;701us;702us;703us;705us;706us;708us;709us;710us;712us;714us;|]
let _fsyacc_reductionSymbolCounts = [|1us;3us;2us;2us;1us;0us;2us;1us;2us;1us;1us;3us;2us;2us;2us;2us;2us;2us;2us;0us;2us;6us;0us;4us;1us;1us;1us;1us;1us;1us;1us;1us;1us;4us;7us;1us;1us;1us;1us;1us;0us;1us;0us;1us;0us;2us;2us;2us;2us;2us;2us;1us;0us;2us;2us;2us;2us;2us;2us;1us;2us;2us;0us;2us;2us;2us;2us;2us;0us;2us;2us;2us;2us;2us;2us;3us;3us;2us;3us;3us;2us;2us;2us;2us;3us;2us;2us;2us;2us;2us;2us;2us;2us;3us;2us;2us;2us;2us;2us;2us;2us;2us;2us;1us;1us;0us;2us;2us;2us;0us;2us;2us;2us;1us;1us;2us;1us;2us;2us;4us;2us;2us;0us;1us;1us;1us;1us;1us;4us;3us;5us;1us;1us;1us;2us;2us;3us;1us;1us;1us;3us;1us;3us;2us;2us;3us;3us;3us;2us;0us;2us;4us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;3us;4us;4us;5us;6us;6us;7us;7us;7us;7us;7us;7us;7us;7us;8us;9us;9us;10us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;11us;12us;12us;13us;13us;14us;14us;15us;15us;16us;16us;16us;16us;16us;16us;17us;17us;17us;17us;17us;17us;17us;18us;18us;18us;19us;19us;19us;19us;19us;19us;20us;20us;20us;20us;20us;20us;20us;21us;21us;21us;21us;21us;21us;21us;22us;22us;23us;23us;24us;25us;26us;26us;26us;26us;27us;27us;27us;27us;27us;28us;28us;28us;29us;29us;29us;30us;30us;31us;31us;32us;32us;33us;33us;34us;35us;35us;35us;36us;37us;38us;38us;39us;39us;40us;41us;41us;42us;43us;43us;43us;44us;44us;44us;45us;45us;45us;45us;45us;45us;45us;46us;47us;47us;48us;48us;48us;48us;49us;49us;49us;50us;51us;51us;52us;53us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;65535us;16385us;65535us;16387us;16388us;16390us;16391us;65535us;16392us;16393us;16394us;65535us;65535us;16395us;65535us;16396us;65535us;16397us;65535us;16398us;65535us;16399us;65535us;16400us;65535us;16401us;65535us;65535us;16404us;65535us;65535us;65535us;65535us;65535us;16405us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16412us;16415us;16416us;65535us;65535us;65535us;16417us;65535us;65535us;65535us;16418us;16419us;16420us;16421us;16422us;16423us;16425us;16427us;16429us;65535us;16430us;65535us;16431us;65535us;16432us;65535us;16433us;65535us;16434us;16435us;65535us;16437us;16438us;65535us;16440us;16441us;16442us;65535us;65535us;65535us;65535us;65535us;16447us;65535us;16449us;16450us;16451us;65535us;16453us;65535us;16455us;16456us;16457us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16461us;65535us;16462us;65535us;16463us;16464us;16465us;65535us;16466us;16467us;65535us;65535us;16468us;16469us;65535us;65535us;65535us;65535us;65535us;16473us;16474us;16475us;65535us;65535us;65535us;16477us;16478us;16479us;16480us;65535us;65535us;16482us;16483us;65535us;65535us;16485us;16486us;16487us;16488us;65535us;16490us;65535us;16491us;65535us;16492us;16494us;65535us;16495us;65535us;16496us;16497us;16498us;65535us;16499us;16500us;65535us;16501us;16502us;65535us;65535us;65535us;16503us;65535us;16505us;16507us;16508us;16509us;16510us;16511us;65535us;65535us;65535us;65535us;16513us;65535us;65535us;65535us;65535us;16514us;16515us;16516us;16517us;65535us;16518us;65535us;65535us;16519us;65535us;65535us;65535us;16520us;16521us;16522us;65535us;65535us;65535us;16525us;65535us;65535us;65535us;16527us;65535us;16528us;65535us;65535us;16529us;16530us;16531us;65535us;65535us;16534us;65535us;65535us;16535us;65535us;65535us;16536us;|]
let _fsyacc_reductions ()  =    [| 
# 682 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> unit in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 691 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_header in
            let _2 = parseState.GetInput(2) :?> 'gentype_blocks in
            let _3 = parseState.GetInput(3) :?> 'gentype_eof in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                             
                   )
# 73 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : unit));
# 704 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_header in
            let _2 = parseState.GetInput(2) :?> 'gentype_blocks in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                         
                   )
# 74 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : unit));
# 716 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _2 = parseState.GetInput(2) :?> string * string list * int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                           eventManager.Value.RecordBeginPgm _2 
                   )
# 78 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_header));
# 728 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                               log.Trace "eof"; eventManager.Value.NotifyEndOfFile _1 
                   )
# 82 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_eof));
# 739 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           
                   )
# 86 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blocks));
# 749 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_blocks in
            let _2 = parseState.GetInput(2) :?> 'gentype_blockwithend in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                               
                   )
# 87 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blocks));
# 761 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                 log.Trace "blockwithend"; eventManager.Value.NotifyNewBlock _1 
                   )
# 91 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blockwithend));
# 772 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            let _2 = parseState.GetInput(2) :?> 'gentype_blockcontent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                begin if log.IsTraceEnabled then log.Trace $"block with line {_1}" end; eventManager.Value.RecordLineNumber _1; _2 
                   )
# 95 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_block));
# 784 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_blockcontent in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                        log.Trace $"block with no line number"; _1 
                   )
# 96 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_block));
# 795 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                   log.Trace $"blockcontent.command"; _1 
                   )
# 100 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blockcontent));
# 806 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linecontent in
            let _2 = parseState.GetInput(2) :?> 'gentype_optcomment in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                          blockOfLineNumber _3 
                   )
# 101 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blockcontent));
# 819 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_path in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcommand in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                         eventManager.Value.AddPath (setMCommand _1 _2); blockOfMCommand _2 
                   )
# 102 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blockcontent));
# 831 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linepolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcommand in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                              blockOfMCommand _2 
                   )
# 103 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blockcontent));
# 843 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlepolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcommand in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                blockOfMCommand _2 
                   )
# 104 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blockcontent));
# 855 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlebyradius in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcommand in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                   blockOfMCommand _2 
                   )
# 105 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blockcontent));
# 867 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circletangential in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcommand in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                     blockOfMCommand _2 
                   )
# 106 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blockcontent));
# 879 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circletangentialpolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcommand in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                          blockOfMCommand _2 
                   )
# 107 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_blockcontent));
# 891 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * string list * int in
            let _2 = parseState.GetInput(2) :?> 'gentype_arguments in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                             begin if log.IsTraceEnabled then log.Trace $"command {_1} {_2}" end; let stampVariable = eventManager.Value.AddCommand _1 _2 in blockOfCommand _1 _2 stampVariable 
                   )
# 111 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_command));
# 903 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           [] 
                   )
# 115 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_arguments));
# 913 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_arguments in
            let _2 = parseState.GetInput(2) :?> 'gentype_argument in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                              _2 :: _1 
                   )
# 116 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_arguments));
# 925 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_varprefix in
            let _2 = parseState.GetInput(2) :?> int in
            let _4 = parseState.GetInput(4) :?> 'gentype_value in
            let _5 = parseState.GetInput(5) :?> 'gentype_optcomment in
            let _6 = parseState.GetInput(6) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                                             (_1, _2, _4, _6) 
                   )
# 120 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_argument));
# 940 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           
                   )
# 124 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 950 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_toolid in
            let _3 = parseState.GetInput(3) :?> 'gentype_toolaxis in
            let _4 = parseState.GetInput(4) :?> 'gentype_toolcalloptions in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                                    eventManager.Value.CallTool _2 _3 _4 
                   )
# 125 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 963 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_path in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                eventManager.Value.AddPath _1 
                   )
# 126 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 974 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_approach in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                    
                   )
# 127 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 985 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_chamfer in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                   
                   )
# 128 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 996 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_round in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                 
                   )
# 129 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1007 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlecenter in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                        eventManager.Value.SetCircleCenter _1 
                   )
# 130 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1018 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlebyradius in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                          
                   )
# 131 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1029 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circletangential in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                            
                   )
# 132 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1040 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_calllbl in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                   eventManager.Value.CallLbl _1 
                   )
# 133 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1051 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_lbl in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                               eventManager.Value.RecordLbl _1 
                   )
# 134 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1062 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            let _4 = parseState.GetInput(4) :?> 'gentype_setvariable in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                        
                   )
# 135 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1074 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            let _5 = parseState.GetInput(5) :?> 'gentype_condition in
            let _7 = parseState.GetInput(7) :?> 'gentype_lbl in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                                  
                   )
# 136 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1087 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_setvariable in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                       
                   )
# 137 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1098 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_patterndef in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                      
                   )
# 138 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1109 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_stop in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                eventManager.Value.AddStop _1 
                   )
# 139 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linecontent));
# 1120 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_line in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                _1 
                   )
# 143 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_path));
# 1131 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circle in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                  _1 
                   )
# 144 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_path));
# 1142 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           None 
                   )
# 148 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolid));
# 1152 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_id in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                              Some(_1) 
                   )
# 149 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolid));
# 1163 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           None 
                   )
# 153 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolaxis));
# 1173 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                Some(_1)
                   )
# 154 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolaxis));
# 1184 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           [] 
                   )
# 158 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolcalloptions));
# 1194 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_toolcalloptions in
            let _2 = parseState.GetInput(2) :?> 'gentype_toolcalloption in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                          _2 :: _1 
                   )
# 159 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolcalloptions));
# 1206 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                              ToolOversize(XValue(_1, _2)) 
                   )
# 163 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolcalloption));
# 1218 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                        ToolOversize(XValue("DR", _2)) 
                   )
# 164 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolcalloption));
# 1230 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                         ToolOversize(XValue("DR", eventManager.Value.ApplyOperator (Number(0.)) "-" _2)) 
                   )
# 165 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolcalloption));
# 1242 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                       ToolFeedRate(_2) 
                   )
# 166 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolcalloption));
# 1253 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                       ToolSpindleSpeed(_2) 
                   )
# 167 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolcalloption));
# 1264 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                 ToolFeedUnit(_1) 
                   )
# 168 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_toolcalloption));
# 1275 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           createPathInstruction "" 
                   )
# 172 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_pathdetails));
# 1285 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pathdetails in
            let _2 = parseState.GetInput(2) :?> 'gentype_directionrotation in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                         setDirectionRotation _1 _2 
                   )
# 173 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_pathdetails));
# 1297 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pathdetails in
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                          setRadiusCompensation _1 (radiusCompensationOfString _2) 
                   )
# 174 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_pathdetails));
# 1309 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pathdetails in
            let _2 = parseState.GetInput(2) :?> 'gentype_coordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                   setCoordinates _1 _2 
                   )
# 175 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_pathdetails));
# 1321 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pathdetails in
            let _2 = parseState.GetInput(2) :?> 'gentype_feedrate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                setFeedRate _1 _2 
                   )
# 176 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_pathdetails));
# 1333 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pathdetails in
            let _2 = parseState.GetInput(2) :?> 'gentype_spindlespeed in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                    setSpindleSpeed _1 _2 
                   )
# 177 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_pathdetails));
# 1345 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pathdetails in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcode in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                             addMCode _1 _2 
                   )
# 178 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_pathdetails));
# 1357 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linedetails in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                       setPathFunction _1 "L" 
                   )
# 182 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_line));
# 1368 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_linedetails in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                            setPathFunction _2 "L" 
                   )
# 183 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_line));
# 1379 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_linedetails in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                          setPathFunction _2 "LN" 
                   )
# 184 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_line));
# 1390 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           createPathInstruction "L" 
                   )
# 188 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linedetails));
# 1400 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linedetails in
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                          setRadiusCompensation _1 (radiusCompensationOfString _2) 
                   )
# 189 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linedetails));
# 1412 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linedetails in
            let _2 = parseState.GetInput(2) :?> 'gentype_coordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                   setCoordinates _1 _2 
                   )
# 190 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linedetails));
# 1424 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linedetails in
            let _2 = parseState.GetInput(2) :?> 'gentype_feedrate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                setFeedRate _1 _2 
                   )
# 191 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linedetails));
# 1436 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linedetails in
            let _2 = parseState.GetInput(2) :?> 'gentype_spindlespeed in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                    setSpindleSpeed _1 _2 
                   )
# 192 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linedetails));
# 1448 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linedetails in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcode in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                             addMCode _1 _2 
                   )
# 193 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linedetails));
# 1460 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           
                   )
# 197 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linepolar));
# 1470 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linepolar in
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                        
                   )
# 198 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linepolar));
# 1482 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linepolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_polarcoordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                      
                   )
# 199 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linepolar));
# 1494 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linepolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_feedrate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                              
                   )
# 200 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linepolar));
# 1506 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linepolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_spindlespeed in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                  
                   )
# 201 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linepolar));
# 1518 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_linepolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcode in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                           
                   )
# 202 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linepolar));
# 1530 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_linepolar in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                        _2 
                   )
# 203 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_linepolar));
# 1541 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_coordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                             
                   )
# 207 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_approach));
# 1553 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_coordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                              
                   )
# 208 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_approach));
# 1564 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                
                   )
# 209 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_approach));
# 1575 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_approach in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                              
                   )
# 210 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_approach));
# 1587 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_approach in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                              
                   )
# 211 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_approach));
# 1599 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_approach in
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                       
                   )
# 212 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_approach));
# 1611 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_approach in
            let _2 = parseState.GetInput(2) :?> 'gentype_feedrate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                             
                   )
# 213 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_approach));
# 1623 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                     
                   )
# 217 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_chamfer));
# 1634 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_chamfer in
            let _2 = parseState.GetInput(2) :?> 'gentype_feedrate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                            
                   )
# 218 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_chamfer));
# 1646 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                       
                   )
# 222 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_round));
# 1657 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_round in
            let _2 = parseState.GetInput(2) :?> 'gentype_feedrate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 223 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                          
                   )
# 223 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_round));
# 1669 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_coordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                        _2 
                   )
# 227 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circlecenter));
# 1680 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_pathdetails in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                       setPathFunction _2 "C" 
                   )
# 231 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circle));
# 1691 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_polarcoordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                               
                   )
# 235 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circlepolar));
# 1702 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlepolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_directionrotation in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                         
                   )
# 236 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circlepolar));
# 1714 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlepolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_feedrate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                
                   )
# 237 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circlepolar));
# 1726 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlepolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcode in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                             
                   )
# 238 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circlepolar));
# 1738 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_coordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                          
                   )
# 242 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circlebyradius));
# 1749 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlebyradius in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                  
                   )
# 243 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circlebyradius));
# 1761 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlebyradius in
            let _2 = parseState.GetInput(2) :?> 'gentype_directionrotation in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                            
                   )
# 244 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circlebyradius));
# 1773 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlebyradius in
            let _2 = parseState.GetInput(2) :?> 'gentype_feedrate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                   
                   )
# 245 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circlebyradius));
# 1785 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circlebyradius in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcode in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                
                   )
# 246 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circlebyradius));
# 1797 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_coordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                          
                   )
# 250 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circletangential));
# 1808 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circletangential in
            let _2 = parseState.GetInput(2) :?> 'gentype_feedrate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                     
                   )
# 251 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circletangential));
# 1820 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circletangential in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcode in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                  
                   )
# 252 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circletangential));
# 1832 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_polarcoordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                
                   )
# 256 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circletangentialpolar));
# 1843 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circletangentialpolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_feedrate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                          
                   )
# 257 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circletangentialpolar));
# 1855 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_circletangentialpolar in
            let _2 = parseState.GetInput(2) :?> 'gentype_mcode in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                       
                   )
# 258 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_circletangentialpolar));
# 1867 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                  directionRotationOfString _1 
                   )
# 262 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_directionrotation));
# 1878 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                   directionRotationOfString _1 
                   )
# 263 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_directionrotation));
# 1889 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 267 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           [] 
                   )
# 267 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_coordinates));
# 1899 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_coordinates in
            let _2 = parseState.GetInput(2) :?> 'gentype_coordinate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 268 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                  _2 :: _1 
                   )
# 268 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_coordinates));
# 1911 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                      XValue(_1, _2) 
                   )
# 272 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_coordinate));
# 1923 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                   XValue("C", _2) 
                   )
# 273 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_coordinate));
# 1934 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           [] 
                   )
# 277 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_polarcoordinates));
# 1944 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_polarcoordinates in
            let _2 = parseState.GetInput(2) :?> 'gentype_polarcoordinate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 278 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                            _2 :: _1 
                   )
# 278 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_polarcoordinates));
# 1956 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 282 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                       XValue(_1, _2) 
                   )
# 282 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_polarcoordinate));
# 1968 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 286 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                       FValue(_2) 
                   )
# 286 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_feedrate));
# 1979 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                 FAuto 
                   )
# 287 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_feedrate));
# 1989 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 288 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                FMax 
                   )
# 288 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_feedrate));
# 1999 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                       _2 
                   )
# 292 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_spindlespeed));
# 2010 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * string list * int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 296 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                    _1 
                   )
# 296 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_mcommand));
# 2021 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 300 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                         float _2 
                   )
# 300 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_mcode));
# 2032 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                        _2 
                   )
# 301 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_mcode));
# 2043 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_id in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                  (_2,_4) 
                   )
# 305 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_calllbl));
# 2055 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_id in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 306 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                      (_2,1) 
                   )
# 306 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_calllbl));
# 2066 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_id in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                  _2 
                   )
# 310 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_lbl));
# 2077 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 314 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           None 
                   )
# 314 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_optcomment));
# 2087 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_comment in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 315 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                   Some(_1) 
                   )
# 315 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_optcomment));
# 2098 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 319 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                   eventManager.Value.NotifyComment(_1); _1 
                   )
# 319 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_comment));
# 2109 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 323 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                 "Q" 
                   )
# 323 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_varprefix));
# 2119 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                     _1 
                   )
# 324 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_varprefix));
# 2130 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 325 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                        _1 
                   )
# 325 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_varprefix));
# 2141 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_varprefix in
            let _2 = parseState.GetInput(2) :?> int in
            let _4 = parseState.GetInput(4) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 329 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                       eventManager.Value.SetVariable _1 _2 _4 
                   )
# 329 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_setvariable));
# 2154 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_varprefix in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 330 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                          eventManager.Value.ResetVariable _1 _2 
                   )
# 330 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_setvariable));
# 2166 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> int in
            let _5 = parseState.GetInput(5) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 331 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                                            eventManager.Value.SetVariable _2 _3 (Str(_5)) 
                   )
# 331 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_setvariable));
# 2179 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 335 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                   Number(float _1) 
                   )
# 335 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_value));
# 2190 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 336 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                  Number(_1) 
                   )
# 336 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_value));
# 2201 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                 constToNumber _1 
                   )
# 337 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_value));
# 2212 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 338 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                      eventManager.Value.ApplyOperator (Number(0.)) _1 _2 
                   )
# 338 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_value));
# 2224 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_varprefix in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 339 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                             eventManager.Value.ResolveVariable _1 _2 
                   )
# 339 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_value));
# 2236 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 340 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                _2 
                   )
# 340 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_value));
# 2247 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 341 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                  Str(_1) 
                   )
# 341 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_value));
# 2258 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 345 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                 _1 
                   )
# 345 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_id));
# 2269 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_op2 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 349 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                               _1 
                   )
# 349 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_op));
# 2280 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_op in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_op in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 350 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                      eventManager.Value.ApplyOperator _1 _2 _3 
                   )
# 350 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_op));
# 2293 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 354 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                 _1 
                   )
# 354 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_op2));
# 2304 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_op2 in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_op2 in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 355 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                      eventManager.Value.ApplyOperator _1 _2 _3 
                   )
# 355 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_op2));
# 2317 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 356 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                      eventManager.Value.ApplyFunction _1 _2 
                   )
# 356 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_op2));
# 2329 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 357 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                    eventManager.Value.ApplyFunction "LN" _2 
                   )
# 357 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_op2));
# 2340 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 361 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                  eventManager.Value.ApplyComparison _1 _2 _3 
                   )
# 361 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_condition));
# 2353 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_varprefix in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 362 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                       eventManager.Value.IsDefined _1 _2 
                   )
# 362 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_condition));
# 2365 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_varprefix in
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 363 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                         not (eventManager.Value.IsDefined _1 _2) 
                   )
# 363 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_condition));
# 2377 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_patterndefargs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 367 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                   
                   )
# 367 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_patterndef));
# 2388 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 371 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                           [] 
                   )
# 371 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_patterndefargs));
# 2398 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_patterndefargs in
            let _2 = parseState.GetInput(2) :?> 'gentype_patterndefarg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 372 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                        _2 :: _1 
                   )
# 372 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_patterndefargs));
# 2410 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_coordinates in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 376 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                                            (_1, _3) 
                   )
# 376 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_patterndefarg));
# 2422 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 380 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                                            _3 
                   )
# 380 "..\Lemoine.Stamping.Heidenhain\Parser.fsy"
                 : 'gentype_stop));
|]
# 2434 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 71;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : unit =
    engine lexer lexbuf 0 :?> _
