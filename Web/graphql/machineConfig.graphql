schema {
  query: Query
  mutation: Mutation
}

type Query {
  cncConfigs: [CncConfig!]!
  cncConfig(name: String!): CncConfig!
  cncAcquisitions: [CncAcquisition!]!
  cncAcquisition(id: ID!): CncAcquisition!
}

type Mutation {
  testCncAcquisition(cncAcquisition: TestCncAcquisition!): CncAcquisitionTest!
  createCncAcquisition(cncAcquisition: NewCncAcquisition!): CncAcquisitionChange!
  updateCncAcquisition(cncAcquisition: UpdateCncAcquisition!): CncAcquisitionChange!
  removeCncAcquisition(cncAcquisitionId: ID!): Boolean!
}

scalar CncConfigUnit # metric / inches / other
scalar CncConfigParamType # ip / url / path / host / string / int / integer / double / list / bool / boolean / file

type CncConfig {
  name: String!
  description: String
  supportedMachines: [CncConfigMachine!]
  supportedControls: [CncConfigControl!]
  supportedProtocols: [CncConfigProtocol!]
  unit: Unit
  parameters: [CncConfigParam!]
}

type CncConfigMachine {
  text: String!
  model: String
}

type CncConfigControl {
  text: String!
  version: String
}

type CncConfigProtocol {
  text: String!
  version: String
}

type CncConfigParam {
  name: String! # currently ParamX
  label: String
  help: String
  description: String
  type: CncConfigParamType
  optional: Boolean
  min: Int # if type=int or integer or double
  max: Int # if type=int or integer or double
  default: String
  advanced: Boolean
  values: [String!] # if type=list or file
  decimal: Int # if type=double
  regex: String
}

type CncConfigParamValue {
  name: String!
  value: String
}

type CncAcquisitionTest {
  cncConfig: CncConfig!
  parameters: [CncConfigParamValue!]!
  loadError: Boolean
  missingParameters: [String!]
  invalidParameters: [String!]
  additionalParameters: [String!]
  cncData: String!
  exitCode: Int # if the console test application was run
}

interface ICncAcquisition {
  id: ID
  cncConfig: CncConfig!
  parameters: [CncConfigParamValue!]!  
}

type CncAcquisition implements ICncAcquisition {
  id: ID!
  cncConfig: CncConfig!
  parameters: [CncConfigParamValue!]!
}

type CncAcquisitionChange implements ICncAcquisition {
  id: ID
  cncConfig: CncConfig!
  parameters: [CncConfigParamValue!]!
  loadError: Boolean
  missingParameters: [string!]
  invalidParameters: [string!]
  additionalParameters: [string!]
  aborted: Boolean
}

input CncConfigParamValueInput {
  name: String!
  value: String
}

input TestCncAcquisition {
  cncConfigName: String!
  parameters: [CncConfigParamValueInput!]!   
}

input NewCncAcquisition {
  cncConfigName: String!
  parameters: [CncConfigParamValueInput!]!   
}

input UpdateCncAcquisition {
  id: ID!
  cncConfigName: String
  parameters: [CncConfigParamValueInput!]
}
