// Copyright (C) 2009-2023 Lemoine Automation Technologies
//
// SPDX-License-Identifier: Apache-2.0

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Threading;
using System.Xml;
using System.Xml.Serialization;

using Lemoine.Core.Log;

namespace Lemoine.DataRepository
{
  /// <summary>
  /// Type of method that returns the list to be processed
  /// </summary>
  public delegate ICollection<T> ListMaker<T> ();

  /// <summary>
  /// List factory: build a repository from a list or from a method that returns a list
  /// </summary>
  public class ListFactory<T> : IFactory
  {
    /// <summary>
    /// List maker exception
    /// </summary>
    public class ListMakerException : RepositoryException
    {
      /// <summary>
      /// <see cref="RepositoryException"/>
      /// </summary>
      /// <param name="message"></param>
      /// <param name="innerException"></param>
      public ListMakerException (string message, Exception innerException)
        : base (message, innerException)
      {
      }
    }

    ICollection<T> m_list = null;
    ListMaker<T> m_listMaker = null;

    static readonly ILog log = LogManager.GetLogger (typeof (ListFactory<T>).FullName);

    #region Getters / Setters
    #endregion

    #region Constructors
    /// <summary>
    /// Constructor from a fixed list
    /// </summary>
    /// <param name="list"></param>
    public ListFactory (ICollection<T> list)
    {
      this.m_list = list;
    }

    /// <summary>
    /// Constructor.
    /// The list is generated by the method in argument.
    /// </summary>
    /// <param name="listMaker"></param>
    public ListFactory (ListMaker<T> listMaker)
    {
      this.m_listMaker = listMaker;
    }
    #endregion

    #region Methods
    /// <summary>
    /// Specialized method to build the DOMDocument
    /// </summary>
    /// <param name="cancellationToken"></param>
    /// <param name="optional"></param>
    /// <returns>The DOMDocument</returns>
    public System.Xml.XmlDocument GetData (CancellationToken cancellationToken, bool optional = false)
    {
      if (m_listMaker != null) {
        try {
          m_list = m_listMaker ();
        }
        catch (Exception ex) {
          log.Error ("GetData: ListMaker exception", ex);
          throw new ListMakerException ("ListMaker error", ex);
        }
      }

      cancellationToken.ThrowIfCancellationRequested ();

      XmlDocument xmlDocument = new XmlDocument ();
      XmlElement rootElement = xmlDocument.CreateElement ("root");
      xmlDocument.AppendChild (rootElement);

      if (m_list is null) {
        log.Warn ("GetData: the list is null ! => could not add any element");
        return xmlDocument;
      }

      System.Diagnostics.Debug.Assert (null != m_list);
      foreach (T i in m_list) {
        cancellationToken.ThrowIfCancellationRequested ();
        Type iType = i.GetType ();
        XmlElement element = xmlDocument.CreateElement (iType.Name);
        XmlSerializer serializer = new XmlSerializer (iType);
        using (TextWriter stream = new StringWriter ()) {
          serializer.Serialize (stream, i);
          XmlDocument xml = new XmlDocument ();
          xml.LoadXml (stream.ToString ());
          rootElement.AppendChild (xmlDocument.ImportNode (xml.DocumentElement, true));
        }
      }

      return xmlDocument;
    }

    /// <summary>
    /// <see cref="IFactory.CheckSynchronizationOkAction" />
    /// </summary>
    /// <returns></returns>
    public bool CheckSynchronizationOkAction ()
    {
      log.Debug ("CheckSynchronizationOkAction: " +
                 "return false");
      return false;
    }

    /// <summary>
    /// <see cref="IFactory.FlagSynchronizationAsSuccess" />
    /// </summary>
    /// <param name="document"></param>
    public void FlagSynchronizationAsSuccess (XmlDocument document)
    {
      // Do nothing special for the moment
      return;
    }

    /// <summary>
    /// <see cref="IFactory.FlagSynchronizationAsFailure" />
    /// </summary>
    /// <param name="document"></param>
    public void FlagSynchronizationAsFailure (XmlDocument document)
    {
      // Do nothing special for the moment
      return;
    }
    #endregion
  }
}
